<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Bits, Bytes, and Words]]></title>
  <link href="http://blog.zimmerman.io/atom.xml" rel="self"/>
  <link href="http://blog.zimmerman.io/"/>
  <updated>2014-06-25T22:10:38-04:00</updated>
  <id>http://blog.zimmerman.io/</id>
  <author>
    <name><![CDATA[Jake Zimmerman]]></name>
    <email><![CDATA[jake@zimmerman.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Running a VPS: Log 2]]></title>
    <link href="http://blog.zimmerman.io/2014/06/24/running-a-vps-log-2/"/>
    <updated>2014-06-24T23:11:14-04:00</updated>
    <id>http://blog.zimmerman.io/2014/06/24/running-a-vps-log-2</id>
    <content type="html"><![CDATA[<h1>Seriously: Back It Up</h1>

<p>I don&rsquo;t have the best track record with configuring servers. I&rsquo;ve certainly brought down a ScottyLabs server or two before, but sometimes there&rsquo;s no avoiding that in the sake of learning. At times like these, you&rsquo;ve just gotta reboot and try again. With DigitalOcean&rsquo;s auto-backups though, this process is incredibly easy.</p>

<!-- more -->


<h2>EncFS Troubles</h2>

<p>As part of my eventual goal of hosting my own mail, I tried following <a href="//sealedabstract.com/code/nsa-proof-your-e-mail-in-2-hours/">this post</a> to set up a mail server on my VPS. Unfortunately, I never even made it out the gates. The first step is to install and set up EncFS for letting you mount encrypted filesystems, which the tutorial was planning on using to store email securely. Unfortunately, after following the steps listed to a T, my poor VPS whined and complained about being misconfigured.</p>

<p><strong>Edit</strong>: After doing a little more research, I found that the root of my issue wasn&rsquo;t something I had been doing. Apparently, you have to <a href="https://www.digitalocean.com/community/tutorials/how-to-update-a-digitalocean-server-s-kernel-using-the-control-panel">manually update the kernel</a> through the DigitalOcean web console. You can read more about it on this <a href="https://github.com/al3x/sovereign/issues/147#issuecomment-43849647">GitHub issue</a>.</p>

<p>Regardless, my first attempt to do something cool on this new VPS was a dud. All I had to show for it was a muddled, no-longer-pristine VPS with some packages and libraries that simply didn&rsquo;t work. If I were to continue with the tutorial by skipping this step, I would have never known whether the cause of any future issue was something misconfigured at this step.</p>

<h2>The Day is Saved</h2>

<p>But then I remembered: DigitalOcean is automatically backing up my droplet! After logging into the web interface, all I had to do was click a button and my whole system was reset to the way it looked 24 hours prior. It was <em>actually that easy</em>.</p>

<p>Thus, for anyone getting started with a new server, whether it be on DigitalOcean or any other service (even a box you have running in your room), I cannot stress enough the value of automatic&mdash;or at least regular&mdash;backups. Not only is this a good idea to preserve data in the event of an outage, but it lends a seemingly unbounded ability to mess around and tinker.</p>

<p>What this means is that you get all the fun of learning cool, new Linux-y things, but without ever having to worry about whether you&rsquo;ll break the whole system. Sure, this mindset isn&rsquo;t necessarily the best to adopt for a production machine, but for my circumstances, all I want is free reign to experiment and break things to my heart&rsquo;s content.</p>

<h2>Back to Square One</h2>

<p>With my first attempt at installing a mail server foiled, I think for my next attempt I&rsquo;ll try a different path. Instead of installing and configuring everything more or less manually (I really wanted to do this for the experience of it all, learning the nitty-gritty of how it works), this time around I think I&rsquo;m going to give <a href="https://github.com/al3x/sovereign">sovereign</a> a try. I&rsquo;ve heard good things, and it is in fact based on the original tutorial I had found, so it&rsquo;s looking pretty promising as of yet.</p>

<p>Whatever happens though, I&rsquo;m feeling pretty good about the fact that I can turn things around with a single click.</p>

<hr />

<br>


<h3>Jake on the Web</h3>

<p><a href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on <a href="http://www.twitter.com/Z1MM32M4N/">Twitter</a>, checking out my tinkerings on <a href="http://www.github.com/Z1MM32M4N/">GitHub</a>, or paying a visit to <a href="http://www.zimmerman.io/">my homepage</a>. I&rsquo;d love to hear what you think about what I&rsquo;ve managed to put together, so feel free to comment, tweet at me, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running a VPS: Log 1]]></title>
    <link href="http://blog.zimmerman.io/2014/06/19/running-a-vps-log-1/"/>
    <updated>2014-06-19T23:10:51-04:00</updated>
    <id>http://blog.zimmerman.io/2014/06/19/running-a-vps-log-1</id>
    <content type="html"><![CDATA[<h1>Managing Dotfiles Across Machines</h1>

<p>You could say I&rsquo;m a bit of a geek when it comes to configuring my terminal environment; this obsession has led me to concoct ever-elaborate setup scripts and configuration files. On top of this, between my laptop&rsquo;s multiple boot environments, the servers I use for school, work, and ScottyLabs, and now <a href="http://blog.zimmerman.io/2014/06/19/running-a-vps-log-0">metagross</a>, keeping my configuration files in sync is a must. I handle it swiftly using a combination of git and rcm.</p>

<!-- more -->


<h2>My Scripts</h2>

<p>I&rsquo;ve put a decent amount of time into my dotfiles. I like to think they&rsquo;re pretty good. That being said, I&rsquo;m not about to go over every piece of them, because that would bore even me. I might come back to these pieces in a series on getting started with the terminal (aimed at incoming CS freshmen and other up-and-coming hackers), but for now, a link will suffice.</p>

<h4><a href="https://github.com/Z1MM32M4N/dotfiles/">Z1MM32M4N/dotfiles</a></h4>

<h2>rcm + git</h2>

<p>rcm, short for rc file (as in .bash<b>rc</b>, .vim<b>rc</b>) management, is a tool that manages symlinks between dotfiles in one directory and your home directory. This is cool because, once all your config files contained in one folder, they can be tracked with git for version control without having to put your entire <code>$HOME</code> directory inside a git repo.</p>

<p>On a single machine, rcm works like this. You have one directory (usually <code>~/.dotfiles</code>, but configurable to any directory) which stores all the config files. In here, all files which are meant to be tracked and symlinked do <em>not</em> include the prefixed &lsquo;<code>.</code>&rsquo;; instead, it is added as part of the linking process. After installation, which is easily handled through the brew formula, the .deb, or the Makefile, there are a couple of new tools available.</p>

<p>The first worth mentioning is <code>man 7 rcm</code>, which documents what was just installed. Taking a glance at this page, we see that rcm is actually a suite of tools: <code>lsrc</code>, <code>mkrc</code>, <code>rcdn</code>, and <code>rcup</code>. While all these tools are useful, the most important is <code>rcup</code>. After collecting all your dotfiles into <code>~/.dotfiles</code>, simply executing <code>rcup</code> symlinks all the necessary files to their appropriate locations.</p>

<p>From here, you get all the benefits of git, like pushing to GitHub, collaborating with others, lightweight branching, and syncing files easily even when your workflow is distributed across many servers.</p>

<h2>Caveats</h2>

<p>To be fair, I don&rsquo;t use <code>rcm</code> in the way I think it&rsquo;s creators imagined it would be used. Specifically, the software includes certain provisions to designate which files should affect various machines using a tag system. While it could possibly work, in my mind it&rsquo;s much more tedious than what I&rsquo;ve come up with.</p>

<p>Succinctly, the issue is this: when cloning a repo and running <code>rcup</code> for the first time, you can&rsquo;t easily say &ldquo;this is my VPS, it&rsquo;s running Debian GNU/Linux, has these system binaries installed, and therefore should start up using these methods and scripts&rdquo;. For this, we&rsquo;re on our own.</p>

<h2>Installation</h2>

<p>The solution I came up with regarding a multiple-environment workflow deals with handling all the necessary machine-dependent configuration within my dotfiles <em>themselves</em>. That way I can minimize code reuse and have everything in one convenient file. As a result, <a href="https://github.com/Z1MM32M4N/dotfiles/tree/master/bash_profile">my bash_profile</a> is a bit lengthy at about 300 lines, and it has three large case statements, but I make all this up through deployment. Deployment is <strong>incredibly</strong> swift. Again, You can take a look at the file to see how it works, but when I had finished <a href="http://blog.zimmerman.io/2014/06/19/running-a-vps-log-1">locking down my server</a>, these are the only configuration commands I had to run:</p>

<figure class='code'><figcaption><span>Installing rcm and dotfiles </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># install rcm using deb and dpkg</span>
</span><span class='line'><span class="nv">$ </span>wget https://thoughtbot.github.io/rcm/debs/rcm_1.2.3-1_all.deb
</span><span class='line'><span class="nv">$ </span>sudo dpkg -i rcm_1.2.3-1_all.deb
</span><span class='line'>
</span><span class='line'><span class="c"># clone dotfiles down, into the ~/.dotfiles directory</span>
</span><span class='line'><span class="nv">$ </span>git clone https://github.com/Z1MM32M4N/dotfiles ~/.dotfiles
</span><span class='line'>
</span><span class='line'><span class="c"># make the symlinks</span>
</span><span class='line'><span class="nv">$ </span>rcup
</span></code></pre></td></tr></table></div></figure>


<p>Voilà! After that, I had my sick bash prompt, my <a href="http://blog.zimmerman.io/2014/06/11/update-your-software-its-the-law/">snazzy update function</a>, my delightful vim colorscheme, solarized dir colors&mdash;the list goes on and on.</p>

<p>Sure, it&rsquo;s taken a bit of effort to get the point where I can run these commands and have it Just Work, but doing that work once means that from now on, whenever I sit down at a new work computer, a new VPS, a new laptop, or some other workstation, I&rsquo;m only a few commands away from my favorite settings.</p>

<hr />

<br>


<h3>Jake on the Web</h3>

<p><a href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on <a href="http://www.twitter.com/Z1MM32M4N/">Twitter</a>, checking out my tinkerings on <a href="http://www.github.com/Z1MM32M4N/">GitHub</a>, or paying a visit to <a href="http://www.zimmerman.io/">my homepage</a>. I&rsquo;d love to hear what you think about what I&rsquo;ve managed to put together, so feel free to comment, tweet at me, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running a VPS: Log 0]]></title>
    <link href="http://blog.zimmerman.io/2014/06/19/running-a-vps-log-0/"/>
    <updated>2014-06-19T21:45:29-04:00</updated>
    <id>http://blog.zimmerman.io/2014/06/19/running-a-vps-log-0</id>
    <content type="html"><![CDATA[<p>Since last Christmas, I&rsquo;ve had a raspberry pi running as a server at my home back in Wisconsin. I had tons of plans for this little guy, but I quickly discovered that he was going to be a bit <em>too</em> little for most of them. Thus, I am now the proud sysadmin of my own virtual private server.</p>

<!-- more -->


<h2>Hosting</h2>

<p>Because at this point in my life I&rsquo;m moving around too much to host my own server somewhere, I decided to contract this part out. I didn&rsquo;t look around too much at VPS providers, but I eventually settled in on DigitalOcean, because it was both recommended at the CClub talk and the most cost-effective of the all the providers I checked. For $10 per month I get a 1-core processor, 1GB of RAM, 30GB of SSD storage, and 2TB of network data transfer. More than enough for a casual VPS.</p>

<h2><a href="http://plusbryan.com/my-first-5-minutes-on-a-server-or-essential-security-for-linux-servers">Safety First</a></h2>

<p>Especially in light of recent security and privacy breeches, the first thing to do on any server is to lock it down. For that, I followed <a href="http://plusbryan.com/my-first-5-minutes-on-a-server-or-essential-security-for-linux-servers">these instructions</a>, with a few modifications.</p>

<p>The post goes over setting up a few simple daemons and setup commands that can be completed in 5 minutes if you&rsquo;ve done this before or half an hour if you want to stop and read up on all the protocols as you go. While I won&rsquo;t reiterate the steps, the list includes setting up the root and an additional sudo user, installing <a href="http://www.fail2ban.org/wiki/index.php/Main_Page">fail2ban</a> for combating brute-force login attempts, setting up ssh logins, setting up a firewall with <a href="https://wiki.ubuntu.com/UncomplicatedFirewall">Uncomplicated Firewall</a>, and a few other sanity checks.</p>

<h2>Personalization</h2>

<p>At this point, the server was safe, but I still couldn&rsquo;t call it &ldquo;mine.&rdquo; My .bash_profile, .vimrc, and all my other configuration scripts were missing. Fortunately, I had prepared for this moment, and getting everything in working order was incredibly easy. Because there&rsquo;s so much to talk about, I&rsquo;ll be [writing about it] in another post, but in the meantime, I&rsquo;m using a program called <a href="https://github.com/thoughtbot/rcm">rcm</a> that turns <a href="https://github.com/Z1MM32M4N/dotfiles">GitHub</a> into the perfect place to store configuration scripts.</p>

<p>I also spent a long time pondering the consequences of <a href="http://xkcd.com/910/">this comic</a>. Eventually I settled on the name of my favorite Pokemon: Metagross. So without further ado, I&rsquo;d like to introduce my shiny new login message:</p>

<center>
<a href="http://blog.zimmerman.io/images/metagross-motd.png"><img src="http://blog.zimmerman.io/images/metagross-motd.png"></a>
</center>


<h2>Onwards</h2>

<p>So there we are! I&rsquo;ve got a bunch of things in the works and even more things planned, so it should be a nice, long-running summer project.</p>

<hr />

<h3>For the Curious</h3>

<p>While I didn&rsquo;t end up using my raspberry pi very extensively, I did manage to get a few things out of it. For one, it gave me my first experiences using Arch Linux. Admittedly, I didn&rsquo;t get the full experience as it came essentially pre-loaded with it, but it was an experience nonetheless. At some point, once I&rsquo;ve settled into living in one place for more than a few months, I plan on building a desktop and running Arch for the lulz.</p>

<p>Also, and this part is still the biggest reason why I keep it up, is that I can run the No-IP Dynamic Update Client as a daemon to keep tabs on the public IP address for my house back in Wisconsin. This lets me do cool things, like ssh into my raspi from anywhere, administer my family&rsquo;s wireless router when it breaks, and potentially log into one of their computers if I needed to (although whenever I do remote into their computer&rsquo;s, I almost always use the Chrome Remote Desktop Client because it&rsquo;s incredibly easy to use but still entirely full-featured).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Summer Project Series]]></title>
    <link href="http://blog.zimmerman.io/2014/06/19/summer-project-series/"/>
    <updated>2014-06-19T20:16:18-04:00</updated>
    <id>http://blog.zimmerman.io/2014/06/19/summer-project-series</id>
    <content type="html"><![CDATA[<p>After spending most of the beginning of the summer flying, driving, moving, moving again, riding trains, riding different trains, and starting a new job, it&rsquo;s finally time to start working on some cool side projects.</p>

<!-- more -->


<h1>Projects</h1>

<p>This page will just serve as a list of links to various posts grouped by project. Hopefully you can find something that interests you!</p>

<h2>Running a VPS</h2>

<p>Inspired in part by the <a href="http://www.club.cc.cmu.edu/talks/vps.html">Computer Club talk</a> and in part by my inability to do anything quickly on a raspberry pi, I recently decided to rent out a VPS from DigitalOcean. Read on for notes and ramblings about what I&rsquo;m using it for.</p>

<ul>
<li><a href="http://blog.zimmerman.io/2014/06/19/running-a-vps-log-0/">Running a VPS: Log 0 &ndash; Initial Setup</a></li>
<li><a href="http://blog.zimmerman.io/2014/06/19/running-a-vps-log-1/">Running a VPS: Log 1 &ndash; Managing Dotfiles Across Machines</a></li>
</ul>


<h2>JavaScript Adventures</h2>

<p>Over at ScottyLabs, we&rsquo;re planning some super awesome talks and labs to teach web development during the upcoming semester, so I&rsquo;ve been hard at work compiling and writing some awesome JavaScript demos, resources, and projects.</p>

<ul>
<li><a href="http://blog.zimmerman.io/2014/06/16/why-everyone-loves-javascript/">Why Everyone Loves JavaScript</a></li>
</ul>


<hr />

<h2>Print@ScottyLabs</h2>

<p>Okay, so I haven&rsquo;t actually started this one yet, but I will be soon! I&rsquo;ll be rewriting the service from just about the ground up, adding tons of cool features along the way.</p>

<p>In the mean time, if mail servers, Python 3, and Django are your thing, you may want to check out the following links that I&rsquo;ve come across while doing a bit of research.</p>

<ul>
<li><strong> <a href="https://docs.python.org/3/whatsnew/3.4.html#whatsnew-email-contentmanager">Python 3.4.1 and MIME Multipart Messages</a> </strong></li>
<li><strong> <a href="https://docs.djangoproject.com/en/dev/releases/1.7/">Django 1.7 to include built-in schema migrations</a> </strong></li>
</ul>


<hr />

<br>


<h3>Jake on the Web</h3>

<p><a href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on <a href="http://www.twitter.com/Z1MM32M4N/">Twitter</a>, checking out my tinkerings on <a href="http://www.github.com/Z1MM32M4N/">GitHub</a>, or paying a visit to <a href="http://www.zimmerman.io/">my homepage</a>. I&rsquo;d love to hear what you think about what I&rsquo;ve managed to put together, so feel free to comment, tweet at me, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Everyone Loves JavaScript]]></title>
    <link href="http://blog.zimmerman.io/2014/06/16/why-everyone-loves-javascript/"/>
    <updated>2014-06-16T00:39:52-04:00</updated>
    <id>http://blog.zimmerman.io/2014/06/16/why-everyone-loves-javascript</id>
    <content type="html"><![CDATA[<p>Airbnb has put together a stellar list of simple ways to make your JavaScript more maintainable and manageable. From comments and whitespace, to hoisting and type casting, this list covers nearly everything you should know when developing a JavaScript app.</p>

<!-- more -->


<h2>The Backstory</h2>

<p>Before I begin, I should mention that any views I express here are entirely my own. Now, I recently began working for the summer at Bloomberg L.P., where for the first few days we sit through a few talks and do a few labs that introduce us to the technologies we&rsquo;ll be using throughout the summer. JavaScript was one of these languages, and I found that a quote on the first slide is all too correct:</p>

<blockquote><p>&ldquo;JavaScript is both the most popular and unpopular programming language.&rdquo;</p>

<p>&mdash; Doug Crockford</p></blockquote>

<p>From there, as you might imagine, the reactions from a predominantly C++ oriented audience towards JavaScript&rsquo;s quirks were pretty amusing. There are some significant differences between these two languages, and if you&rsquo;re not careful, they can get annoying quite quickly.</p>

<h2>Links</h2>

<h3><a href="https://github.com/airbnb/javascript">airbnb/javascript</a></h3>

<p>JavaScript might have it&rsquo;s quirks, but it&rsquo;s still a vastly powerful language, especially if used well. For any aspiring JavaScript developer, I would highly recommend looking over Airbnb&rsquo;s JavaScript best practices. Even if you think you&rsquo;ve got the language down, I&rsquo;m confident you&rsquo;ll uncover something useful.</p>

<h3><a href="https://www.destroyallsoftware.com/talks/the-birth-and-death-of-javascript">The Birth and Death of JavaScript</a></h3>

<p>While you&rsquo;re here, check out this video for an incredibly humorous and satisfyingly accurate discussion of JavaScript, from birth to death.</p>

<h3><a href="https://www.destroyallsoftware.com/talks/wat">Wat</a></h3>

<p>Aaand while we&rsquo;re posting humorous JavaScript videos, I&rsquo;ve gotta throw this one into the mix.</p>

<hr />

<br>


<h3>Jake on the Web</h3>

<p><a href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on <a href="http://www.twitter.com/Z1MM32M4N/">Twitter</a>, checking out my tinkerings on <a href="http://www.github.com/Z1MM32M4N/">GitHub</a>, or paying a visit to <a href="http://www.zimmerman.io/">my homepage</a>. I&rsquo;d love to hear what you think about what I&rsquo;ve managed to put together, so feel free to comment, tweet at me, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update Your Software: It's the Law]]></title>
    <link href="http://blog.zimmerman.io/2014/06/11/update-your-software-its-the-law/"/>
    <updated>2014-06-11T22:22:57-04:00</updated>
    <id>http://blog.zimmerman.io/2014/06/11/update-your-software-its-the-law</id>
    <content type="html"><![CDATA[<p>Okay, so maybe the government won&rsquo;t come after you for not updating. But they should. To guard off any present or future threats (be they from governments, security vulnerabilities, or something else in the cyber realm), I wrote a short bash snippet to check my system for outdated packages.</p>

<!-- more -->


<h2>Obligatory Existential/Meta Section</h2>

<p>I don&rsquo;t quite know what prompted me to suddenly become interested in maintaining an up to date system. Maybe it was <a href="https://www.facebook.com/groups/cmuscs/permalink/727878180603546/">this post</a> of Arch Linux horror stories. Maybe it was the release of <a href="https://git.kernel.org/cgit/git/git.git/tree/Documentation/RelNotes/2.0.0.txt">git 2.0</a>, which introduces a lot of cool new features and deprecates a lot of others. Who knows, maybe it was influenced by Heartbleed and the <a href="https://www.openssl.org/news/secadv_20140605.txt">host</a> <a href="http://grahamcluley.com/2014/06/feedly-blackmail-ddos/">of other</a> <a href="http://blog.evernote.com/blog/2013/03/02/security-notice-service-wide-password-reset/">high-profile</a> security vulnerabilities and hacks that have sprung up lately. It&rsquo;s probably a combination of all of these. Let&rsquo;s move on.</p>

<p>For the impatient among us, here&rsquo;s the code, which is also available <a href="https://github.com/Z1MM32M4N/dotfiles/blob/master/bash_profile#L16-L42">here</a> and <a href="https://github.com/Z1MM32M4N/dotfiles/blob/master/bash_profile#L153-L178">here</a> amongst all the code for <a href="https://github.com/Z1MM32M4N/dotfiles">all my dotfiles</a>.</p>

<figure class='code'><figcaption><span>Alert to Update</span><a href='https://github.com/Z1MM32M4N/dotfiles/blob/master/bash_profile#L16-L42'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ----- daily updates --------------------------------------------------------</span>
</span><span class='line'><span class="o">[</span> ! -e <span class="nv">$HOME</span>/.last_update <span class="o">]</span> <span class="o">&amp;&amp;</span> touch <span class="nv">$HOME</span>/.last_update
</span><span class='line'><span class="c"># Initialize for when we have no GNU date available</span>
</span><span class='line'><span class="nv">last_check</span><span class="o">=</span>0
</span><span class='line'><span class="nv">time_now</span><span class="o">=</span>0
</span><span class='line'>
</span><span class='line'><span class="c"># Unix last command to check the log of logins, grab the most recent</span>
</span><span class='line'><span class="nv">last_check_string</span><span class="o">=</span><span class="sb">`</span>ls -l <span class="nv">$HOME</span>/.last_update | awk <span class="s1">&#39;{print $6&quot; &quot;$7&quot; &quot;$8}&#39;</span><span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Darwin uses BSD, check for gdate, else use date</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="sb">`</span>uname<span class="sb">`</span> <span class="o">=</span> <span class="s2">&quot;Darwin&quot;</span> <span class="o">&amp;&amp;</span> -n <span class="sb">`</span>which gdate<span class="sb">`</span> <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nv">last_login</span><span class="o">=</span><span class="sb">`</span>gdate -d<span class="s2">&quot;$last_check_string&quot;</span> +%s<span class="sb">`</span>
</span><span class='line'>  <span class="nv">time_now</span><span class="o">=</span><span class="sb">`</span>gdate +%s<span class="sb">`</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="c"># Ensure this is GNU grep</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> -n <span class="s2">&quot;`date --version 2&gt; /dev/null | grep GNU`&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nv">last_login</span><span class="o">=</span><span class="sb">`</span>date -d<span class="s2">&quot;$last_login_string&quot;</span> +%s<span class="sb">`</span>
</span><span class='line'>    <span class="nv">time_now</span><span class="o">=</span><span class="sb">`</span>date +%s<span class="sb">`</span>
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nv">time_since_check</span><span class="o">=</span><span class="k">$((</span>time_now <span class="o">-</span> last_login<span class="k">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$time_since_check&quot;</span> -ge 86400 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;$cred==&gt;$cwhiteb Your system is out of date!$cnone&quot;</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s1">&#39;Run `update` to bring it up to date.&#39;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Check for Updates</span><a href='https://github.com/Z1MM32M4N/dotfiles/blob/master/bash_profile#L153-L178'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ----- function -------------------------------------------------------------</span>
</span><span class='line'>update<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  touch <span class="nv">$HOME</span>/.last_update
</span><span class='line'>
</span><span class='line'>  <span class="c"># Mac updates</span>
</span><span class='line'>  <span class="k">case</span> <span class="nv">$HOSTNAME</span> in
</span><span class='line'>    *Jacobs-MacBook-Air*<span class="o">)</span>
</span><span class='line'>      <span class="nb">echo</span> <span class="s2">&quot;$cblueb==&gt;$cwhiteb Updating Homebrew...$cnone&quot;</span>
</span><span class='line'>      brew update
</span><span class='line'>
</span><span class='line'>      <span class="nb">echo</span> <span class="s2">&quot;$cblueb==&gt;$cwhiteb Checking for outdated brew packages...$cnone&quot;</span>
</span><span class='line'>      brew outdated --verbose
</span><span class='line'>
</span><span class='line'>      <span class="nb">echo</span> <span class="s2">&quot;$cblueb==&gt;$cwhiteb Checking for outdated rbenv...$cnone&quot;</span>
</span><span class='line'>      <span class="nb">cd</span> <span class="nv">$HOME</span>/.rbenv
</span><span class='line'>      git fetch
</span><span class='line'>      <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;`git describe --tags master`&quot;</span> !<span class="o">=</span> <span class="s2">&quot;`git describe --tags origin/master`&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">echo</span> <span class="s2">&quot;rbenv (`git describe --tags master`) is outdated (`git describe --tags origin/master`).&quot;</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;To update, run: cd ~/.rbenv; git merge origin master &amp;&amp; cd -&quot;</span>
</span><span class='line'>      <span class="k">fi</span>
</span><span class='line'><span class="k">      </span><span class="nb">cd</span> - 2&gt;&amp;1 &gt; /dev/null
</span><span class='line'>
</span><span class='line'>      <span class="nb">echo</span> <span class="s2">&quot;$cblueb==&gt;$cwhiteb Checking for outdated ruby gems...$cnone&quot;</span>
</span><span class='line'>      gem outdated
</span><span class='line'>      ;;
</span><span class='line'>  <span class="k">esac</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;ll note the use of a touch file (created in line 2 of the first snippet if it doesn&rsquo;t already exist). If this file is 24 hours old, each time this code is run an alert will be printed. Since this code is running inside of my <code>.bash_profile</code>, that means that every time I open a terminal on a 24-hour-old system, I see the update message.</p>

<p>Next, you&rsquo;ll note that I&rsquo;ve defined a function called <code>update</code> which is actually misnamed. This function merely checks for available updates instead of actually performing the updates, logging those packages, gems, and formulae it finds that are out of date. For my purposes, I only need to update brew, check for formulae updates, update rbenv, and check for gem updates. Obviously though, given that there is a way to programmatically check something for updates, plugging that code in here would check it as well. This means that this method is very easy to customize and extend for various needs.</p>

<h2>Rant</h2>

<p>I was planning on checking pip for updates as well, but pip is kind of not even good. To give you an idea, to check all the packages brew manages for updates, you type <code>brew outdated</code>, and it will list the formula name, current version number, and newest version number. Meanwhile, back in the land of pip, no such functionality exists (at least, simple functionality, and functionality that I could find. If you&rsquo;d like to correct me, be my guest!). I&rsquo;m sure that this script will grow as I come to manage more and more pieces of software on my system and others.</p>

<p>If you have any questions about what I&rsquo;ve done here, or you catch some bugs, be sure to comment below or file an issue on GitHub! I&rsquo;d love to hear what you have to say.</p>

<hr />

<br>


<h3>Jake on the Web</h3>

<p><a href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on <a href="http://www.twitter.com/Z1MM32M4N/">Twitter</a>, checking out my tinkerings on <a href="http://www.github.com/Z1MM32M4N/">GitHub</a>, or paying a visit to <a href="http://www.zimmerman.io/">my homepage</a>. I&rsquo;d love to hear what you think about what I&rsquo;ve managed to put together, so feel free to comment, tweet at me, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Molokai: An iTerm2 Color Scheme]]></title>
    <link href="http://blog.zimmerman.io/2014/06/07/molokai-an-iterm2-color-scheme/"/>
    <updated>2014-06-07T12:00:39-04:00</updated>
    <id>http://blog.zimmerman.io/2014/06/07/molokai-an-iterm2-color-scheme</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve used <a href="https://github.com/tomasr">tomasr</a>&rsquo;s vim color scheme <a href="https://github.com/tomasr/molokai">molokai</a> for a long time now. Recently I decided that the default iTerm2 colors were a little lack luster, so I ported over the main colors from this theme into an iTerm2 theme.</p>

<!-- more -->


<h2><a href="https://github.com/mbadolato/iTerm2-Color-Schemes#molokai"><i class="fa fa-angle-double-right"></i> Installation</a></h2>

<p>If you don&rsquo;t already have your iTerm2 colors configured or you&rsquo;re looking for a change, you should definitely check out <a href="https://github.com/mbadolato/iTerm2-Color-Schemes">iTerm2-Color-Schemes</a>, a GitHub repo by <a href="https://github.com/mbadolato">mbadolato</a> filled with tons of themes he&rsquo;s ported, collected, and been given.</p>

<p>You can see and install the <a href="https://github.com/mbadolato/iTerm2-Color-Schemes#molokai">Molokai theme</a> there.</p>

<h2>Screenshots</h2>

<p>I don&rsquo;t have too many good screenshots of this theme that aren&rsquo;t vim because I&rsquo;m actually using <a href="https://github.com/seebi/dircolors-solarized">solarized</a> dircolors for colorizing the output of my <code>ls</code> and related commands. However, there are still plenty of tools I use which resort to default ANSI colors to colorize their output, like <code>git</code> and <code>brew</code>. You can see a <code>git log</code> command along side a table of all ANSI color combinations resulting from this theme (this table can be a bit overwhelming: it&rsquo;s best to just look at the first two columns to get an idea of what the colors really look like).</p>

<p><a href="http://blog.zimmerman.io/images/molokai.png"><img src="http://blog.zimmerman.io/images/molokai.png"></a></p>

<hr />

<br>


<h3>Jake on the Web</h3>

<p><a href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on <a href="http://www.twitter.com/Z1MM32M4N/">Twitter</a>, checking out my tinkerings on <a href="http://www.github.com/Z1MM32M4N/">GitHub</a>, or paying a visit to <a href="http://www.zimmerman.io/">my homepage</a>. I&rsquo;d love to hear what you think about what I&rsquo;ve managed to put together, so feel free to comment, tweet at me, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HPSTR: An Octopress Theme]]></title>
    <link href="http://blog.zimmerman.io/2014/06/04/hpstr-an-octopress-theme/"/>
    <updated>2014-06-04T21:51:41-04:00</updated>
    <id>http://blog.zimmerman.io/2014/06/04/hpstr-an-octopress-theme</id>
    <content type="html"><![CDATA[<p>In case you didn&rsquo;t notice, we&rsquo;re rocking a new theme: <a href="https://github.com/Z1MM32M4N/hpstr-theme">HPSTR for Octopress</a>! Ported from the <a href="https://github.com/mmistakes/hpstr-jekyll-theme">theme of the same name</a> for Jekyll, this theme has a bunch of cool new features that make the theme easier to use and more customizable.</p>

<!-- more -->


<p>Before I begin, I have to give a huge shout out to <a href="https://github.com/mmistakes/">mmistakes</a> for crafting such an impeccable set of stylesheets and Jekyll templates. I could talk this theme up all day, but I think that the results speak for themselves. Even more praiseworthy is that the entire source code is licensed under the GPL, enabling anyone to take the source and build upon it. And on that note, I&rsquo;d like to unveil what <em>I&rsquo;ve</em> built.</p>

<h1>Ported to Octopress</h1>

<p>The theme was originally implemented for a vanilla Jekyll blog. Personally, I find the automation tools provided by Octopress to be incredibly helpful, and I didn&rsquo;t want to give these up to be able to deploy this theme. As a result, I had to tweak a few things in order to get it to work with a standard Octopress installation.</p>

<h2>Less to Sass</h2>

<p>The HPSTR theme was originally built using Less to compile its stylesheets. Octopress uses Sass under Compass instead&mdash;a decision which I love: the rich library of plugins that Compass provides is ridiculous. Thus, this was the first step of the port.</p>

<p>After a quick Google search I stumbled upon <a href="http://stackoverflow.com/questions/14970224/anyone-know-of-a-good-way-to-convert-from-less-to-sass">this question</a> on Stack Overflow, which surprisingly took care of the vast majority of the conversion, leveraging mere text replacement. From there, it was mostly a matter of slugging through the Less docs to find out what a particular function did, jumping over to the Compass/Sass docs to find a corresponding mixin, and repeating.</p>

<h2>Sass to Compass</h2>

<p>I didn&rsquo;t stop after I had the vanilla Sass working. One of Compass&rsquo;s coolest features is that you don&rsquo;t have to repeat yourself: there are mixins for seemingly everything, and when there aren&rsquo;t, there are 3<sup>rd</sup> party plugins. Thus, the next phase of the port was to see how much of the code I could reduce to compass mixins.</p>

<p>For the most part, this stage affected CSS3 properties which need vendor prefixes, to include keyframe animations. The keyframe animations are particularly worthy of a mention because I found a handy plugin called <a href="https://github.com/ericam/compass-animation">compass-animation</a> to take care of them. It works as easily as any other Compass mixin, from installation to use.</p>

<h2>Octopress Mannerisms</h2>

<p>There are a few things that Octopress users can expect to be reasonably similar from one deployment to the next, and I wanted to ensure that as many of the features dually implemented by mmistakes and Octopress used the syntax or conformed to the style set forth by Octopress. A small example of this: the <code>page.link</code> and <code>page.external_url</code> properties. Defined by the old and new themes respectively, both accomplish a similar purpose. Each specifies that the main purpose of the post is to link to a different page. Not wanting to break the service for current Octopress users, I tried to convert as many of these subtleties.</p>

<p>On top of this, I restructured a lot of the original code so that someone used to customizing an Octopress theme would feel more at home when checking out the source for this theme, even if some of the particulars were different. This applied mostly to the Sass directory structure, but also to the templates.</p>

<h1>More Powerful Customization</h1>

<p>One of the many ways Octopress adds value on top of Jekyll is the ease with which you can get a Jekyll blog up and running, and subsequently customize and tweak that theme. This was one area where I felt that the original Jekyll theme fell short. The original stylesheets had a somewhat decent set of variables (in <code>less/variables.less</code>) that would allow you to customize the colors and font faces, but the method for customizing the size of the font was wonky (larger values produced smaller fonts), and the various mixins employed to handle setting the sizes were confusing.</p>

<p>To solve this, I added <em>loads</em> of new variables handling the font sizes and line heights on a per-component basis, while also providing a master switch to easily resize everything. My theme also differs here from the original in that it&rsquo;s default font size is slightly larger for normal paragraph text (the whole reason why I cared about customizing the font size in the first place!).</p>

<h1>Like what you see?</h1>

<p>This theme is in no way perfect, from the styles to the compatibility with the vast array of Octopress options. If my support for your favorite feature is lacking or absent altogether, patch it up and submit a pull request on <a href="https://github.com/Z1MM32M4N/hpstr-theme">GitHub</a>!</p>

<p><strong>I&rsquo;d also love to hear about your installation process.</strong> If something didn&rsquo;t quite work out right when installing the theme from GitHub or everything went super smoothly, tell me on GitHub in an issue, on <a href="https://www.twitter.com/Z1MM32M4N">Twitter</a>, in the comments below, or in an <a href="mailto:jake@zimmerman.io">email</a>. Seriously!</p>

<hr />

<br>


<h3>Jake on the Web</h3>

<p><a href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on <a href="http://www.twitter.com/Z1MM32M4N/">Twitter</a>, checking out my tinkerings on <a href="http://www.github.com/Z1MM32M4N/">GitHub</a>, or paying a visit to <a href="http://www.zimmerman.io/">my homepage</a>. I&rsquo;d love to hear what you think about what I&rsquo;ve managed to put together, so feel free to comment, tweet at me, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub Pages Custom Domains]]></title>
    <link href="http://blog.zimmerman.io/2014/05/06/github-pages-custom-domains/"/>
    <updated>2014-05-06T03:15:35-04:00</updated>
    <id>http://blog.zimmerman.io/2014/05/06/github-pages-custom-domains</id>
    <content type="html"><![CDATA[<p>I stumbled at first getting the DNS configured for my blog, because I&rsquo;ve got a slighty more complicated setup than normal. I decided to supplement the documentation <a href="https://pages.github.com/">GitHub Pages</a> gives by recounting my personal example and the setup that worked.</p>

<!-- more -->


<p>If you&rsquo;ve never heard of <a href="https://pages.github.com/">GitHub Pages</a> for web hosting, you should definitely check it out. You basically get free hosting for any static (i.e. plain HTML or <a href="http://jekyllrb.com/">Jekyll</a>-served) website with git-push-to-deploy. You can even configure your site to be listed at a custom domain according to <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages">these</a> instructions, which are pretty thorough. I feel like it&rsquo;d help, though, to supplement this documentation with a fairly common example setup.</p>

<h2>My setup</h2>

<p>I have two sites which I want to host using the <code>zimmerman.io</code> domain name: my <a href="//blog.zimmerman.io">blog</a> and my <a href="//www.zimmerman.io">personal site</a>. I host my personal site at <a href="//www.zimmerman.io">www.zimmerman.io</a>, but you can also navigate to <a href="//zimmerman.io">zimmerman.io</a> and end up in the same places as before. It&rsquo;s served as a User Page from <a href="https://www.github.com/Z1MM32M4N/z1mm32m4n.github.io">this repo</a>.</p>

<p>I host my blog at <a href="//blog.zimmerman.io">blog.zimmerman.io</a>, and it&rsquo;s served as a Project Page in <a href="https://www.github.com/Z1MM32M4N/blog/">this repo</a>.</p>

<h2>What the instructions say</h2>

<p>The instructions say a few things very clearly (yay, documentation!).</p>

<p>First, if I want to use a custom subdomain (like what I&rsquo;m doing for my blog) to host a repo, I can add a <code>CNAME</code> record with my DNS provider that points to what is in my case <code>z1mm32m4n.github.io</code>. This was counterintuitive to me, because I thought at first that this would make my blog.zimmerman.io domain redirect to my personal site, but that&rsquo;s not how GitHub handles it. (They&rsquo;re smarter than that.)</p>

<p>At the same time, I need to put a file in the root of the blog&rsquo;s repo (in the <code>gh-pages</code> branch because it&rsquo;s a Project Page), called <code>CNAME</code> (<a href="https://github.com/Z1MM32M4N/blog/blob/gh-pages/CNAME">view source</a>) with the contents &lsquo;blog.zimmerman.io&rsquo;. After a little while, the DNS tables will update and everything here should work: I can now view my <em>blog</em> where I want it.</p>

<h2>What the instructions say, but not so clearly</h2>

<p>The next bit gave me some trouble at first (probably just because I was being impatient while the DNS tables were updating). The end goal was to have the <code>www</code> subdomain host my site and have the <code>@</code> (top-level or apex) domain redirect there. If you read carefully, the instructions say to do three things:</p>

<ol>
<li> Make the <code>CNAME</code> file (<a href="https://github.com/Z1MM32M4N/z1mm32m4n.github.io/blob/master/CNAME">view source</a>) in my (User) Pages repository contain <code>www.zimmerman.io</code>. <strong>This</strong> is the domain at which I do want my site to be visible.</li>
<li> Create a <code>CNAME</code> record with my DNS provider pointing to <code>z1mm32m4n.github.io</code> for the <code>www</code> subdomain. From a technical standpoint on the DNS provider&rsquo;s side of things, this is the same thing we did before with the <code>blog</code> subdomain.</li>
<li> Create an <code>A</code> record pointing the <code>@</code> domain towards GitHub using the IP address they specify.</li>
</ol>


<p>This last step is where you have to have a little faith: nowhere is there an explicit file telling GitHub, &ldquo;If you get a request from zimmerman.io, send it to me!&rdquo; GitHub merely notices that there <strong>is</strong> a repo with a CNAME containing &lsquo;<strong>www</strong>.zimmerman.io&rsquo;, and so they say, &ldquo;Well, we may as well send this <strong>top level</strong> domain to the <strong>www</strong> domain referenced over here&hellip; I&rsquo;ve got nothing better to do.&rdquo;</p>

<p>This was a little confusing at first, because if I wanted the opposite direction (www.zimmerman.io to redirect to zimmerman.io), I would have still created a CNAME file, but it would have contained <code>zimmerman.io</code> and I would have created an <code>A</code> record with my DNS provider, not an actual CNAME. (I still did have to create both the <code>A</code> and <code>CNAME</code> in the end, but in this setup, the <code>A</code> record is referenced in the <code>CNAME</code> file, if that makes any sense.)</p>

<h2>Recap</h2>

<h3>My CNAME Files</h3>

<ul>
<li> For www.zimmerman.io:

<ul>
<li> CNAME file contains <code>www.zimmerman.io</code></li>
<li> CNAME file resides in <code>master</code> branch of User Pages repo for Z1MM32M4N</li>
</ul>
</li>
<li> For blog.zimmerman.io

<ul>
<li> CNAME file contains <code>blog.zimmerman.io</code></li>
<li> CNAME file resides in <code>gh-pages</code> branch of Project Pages repo for Z1MM32M4N/blog</li>
</ul>
</li>
</ul>


<h3>My DNS Config</h3>

<p>Here&rsquo;s a screenshot of what my records look like with my DNS provider, in case this was still unclear.</p>

<p><a href="http://blog.zimmerman.io/images/DNS-config.jpg"><img src="http://blog.zimmerman.io/images/DNS-config.jpg"></a></p>

<p>I&rsquo;m personally using <a href="https://www.gandi.net/">Gandi</a> for domain registration because they had the cheapest <code>.io</code> TLD registration, but their interface takes some getting used to. (It was certainly still worth the deal I got.)</p>

<hr />

<br>


<h3>Jake on the Web</h3>

<p><a href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on <a href="http://www.twitter.com/Z1MM32M4N/">Twitter</a>, checking out my tinkerings on <a href="http://www.github.com/Z1MM32M4N/">GitHub</a>, or paying a visit to <a href="http://www.zimmerman.io/">my homepage</a>. I&rsquo;d love to hear what you think about what I&rsquo;ve managed to put together, so feel free to comment, tweet at me, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding a Network Printer to a Linux Server]]></title>
    <link href="http://blog.zimmerman.io/2014/05/06/adding-a-network-printer-to-a-linux-server/"/>
    <updated>2014-05-06T02:09:29-04:00</updated>
    <id>http://blog.zimmerman.io/2014/05/06/adding-a-network-printer-to-a-linux-server</id>
    <content type="html"><![CDATA[<p>It&rsquo;s one thing to plug in a CD, click through a few dialogs, and wait for the computer to chime at you saying that your printer has been installed. Unfortunately, this is not how server administration works. Here&rsquo;s my account of installing multiple network-attached printers on a Debian server.</p>

<!-- more -->


<p></p>

<h2>TL;DR</h2>

<p>For those who only care about the solution: <a href="#tldr">TL;DR</a>.</p>

<h2>The Hard Way</h2>

<p>As I mentioned in my last post, I&rsquo;m a part of a student organization called <a href="//www.scottylabs.org">ScottyLabs</a>. We do tons of cool things, but the project which I&rsquo;m currently working on is <a href="//print.scottylabs.org">Print@ScottyLabs</a>. It&rsquo;s a really handy service which lets you send an attachment to <a href="&#x6d;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#x70;&#x72;&#x69;&#110;&#116;&#64;&#x73;&#x63;&#x6f;&#116;&#x74;&#x79;&#108;&#x61;&#98;&#115;&#46;&#x6f;&#x72;&#x67;">&#112;&#114;&#105;&#x6e;&#x74;&#x40;&#115;&#99;&#111;&#x74;&#x74;&#121;&#x6c;&#97;&#98;&#x73;&#x2e;&#111;&#114;&#103;</a> and have it sent to the printer. I&rsquo;m currently in the process of rewriting much of the code base from scratch to support a plethora of highly-requested features, so there will no doubt be more posts about my exploits.</p>

<p>Luckily, CMU (and arguably every college) is not terribly notable for keeping up-to-date information on it&rsquo;s website. This means that I got the &ldquo;wonderful&rdquo; opportunity to dig through CUPS documentation, sketchy printer manufacturer websites, and the depths of the Internet to finagle together a solution. Here&rsquo;s to hoping that you have a far more pleasurable experience. Without further ado, these are the steps I went through to get it done.</p>

<h2>What Didn&rsquo;t Work</h2>

<p>The Common Unix Printing System (CUPS) is a relatively new standard which is designed to improve over the rather haphazard methods used for printing in the past. It improves in a lot of ways and has a few neat features. One of these is a handy web interface which lets you interact with your configuration files, add printers, view the print queue, etc. through a beginner-friendly GUI, which described me perfectly when I started and still does now.</p>

<p>By default, when <code>cupsd</code> (the CUPS daemon) starts up, it listens on <code>http://localhost:631</code> incoming HTTP requests. By default, external requests are refused. You can either enable these in a configuration file somewhere or <a href="http://ubuntuguide.org/wiki/Using_SSH_to_Port_Forward">tunnel your traffic</a> through an <code>ssh</code> proxy, &ldquo;tricking&rdquo; the server into thinking your requests are coming locally. Additionally, you must be either <code>root</code> or in the <code>lpadmin</code> group to access the administration parts of this web GUI.</p>

<p>But for whatever reason, neither using the <code>root</code> username and password nor adding myself to the <code>lpadmin</code> group worked. I was incessantly blocked by the interface when I tried to give it my credentials. Defeated, I needed to find another way.</p>

<p>I’m telling you this as a sort of justification for the super hacky solution that I came up with (but that works in the end, even if it’s non-standard). If you have any ideas on why this failed, I&rsquo;d love to hear them!</p>

<h2>When in doubt, duct tape</h2>

<p>The instructions to install CMU print drivers on Linux only work for environments with desktop environments installed. (You can read these instructions <a href="http://www.cmu.edu/computing/clusters/printing/how-to/linux/pers-cluster.html">here</a>). So, in keeping with the UNIX philosophy that everything’s a file, the solution I came up with was essentially to follow these instructions on a <strong>personal Linux box</strong>, then <strong>copy and modify</strong> the corresponding files to achieve the same effect on the server we need them to be on.</p>

<p>It’s at this point that you’re probably wondering why I didn’t just do a little research and figure out how to make these modifications myself, or perhaps figure out where the files I needed were coming from. There are a couple of reasons. First, that takes a lot of time, I&rsquo;m lazy, and whatever I came up with didn&rsquo;t need to scale. Second, when you install a CUPS printer, you need a PostScript Printer Description (PPD) file to tell CUPS how the printer works. Despite my best efforts searching the web, I couldn’t find a central repository where these .ppd files were stored. However, most desktop environments have the ability to search <strong>somewhere mystical</strong> (read: you should tell me if you know) and download these .ppd files.</p>

<p><a name="tldr"></a></p>

<h2>Do you think I really care, just tell me how it works</h2>

<p>The process is not too complicated. Go back to the <a href="http://www.cmu.edu/computing/clusters/printing/how-to/linux/pers-cluster.html">CMU instructions</a> to install a printer on a personal Linux machine. Following them should be fairly self explanatory. Say perhaps that you want to install the print drivers for the queue <code>andrew-color</code>. After following along and inserting “andrew-color” as the print queue where required, you’ll come up to a screen that asks you to name your printer. This name does not have to be the name of the queue, but I always make it that when I&rsquo;m working with the CMU printers. Either way, be sure to remember what you entered for this name (again, I’m using the name “andrew-color”).</p>

<p>Also, part of the process should involve you specifying a PPD file. The easiest way to do this is to go to a printer that dispatches jobs from that queue and to get the make and model for it. In the case of andrew-color, the Wean printer is an HP Color LaserJet CP6015x. Using this information, we can use the Gnome/KDE/XFCE window, enter our make and model, and have it spit out the recommended PPD file to use (although it likely won&rsquo;t call as such).</p>

<p>Now that everything is all installed, we can pluck the information we need. If you’re on a standard Linux install, your CUPS files will be in <code>/etc/cups</code>. The specific files that are of interest to us are <code>/etc/cups/printers.conf</code> and <code>/etc/cups/ppd/&lt;your-printer-name&gt;.ppd</code>, so my file is called <code>/etc/cups/ppd/andrew-color.ppd</code>. We need the entire .ppd file, and it will go into the corresponding directory on our server. As for <code>printers.conf</code>, we just need a specific entry. This file is a list of all the installed printers, each wrapped in <code>&lt;Printer your-printer-name&gt;&lt;/Printer&gt;</code> tags. Yank this text however you want from your local computer to the server, and add it to the corresponding <code>printers.conf</code> file. If your personal Linux machine made the <code>&lt;Printer&gt;&lt;/Printer&gt;</code> tags into <code>&lt;DefaultPrinter x&gt;&lt;/DefaultPrinter&gt;</code> tags, go ahead and change this to just <code>&lt;Printer x&gt;&lt;/Printer&gt;</code>. To recap, now I’ve got about 20 lines of additional configuration data added to the <code>printers.conf</code> file on my server, beginning with the line <code>&lt;Printer andrew-color&gt;</code> and ends with the line <code>&lt;/Printer&gt;</code>.</p>

<p>For my installation, I have one more thing to do. Somewhere in the middle of this entry, there is a line which reads something like <code>Filter application/vnd.cups-postscript 0 hpps</code>. CUPS has a filtering functionality that lets you interact with the data before it gets printed, which you can read more about <a href="http://en.wikipedia.org/wiki/CUPS#Filtering_process">here</a>. We want to make sure that we use the <code>foomatic</code> filters (because that&rsquo;s how our server is configured), so we have to change the existing filters so that they read
<del>
Filter application/vnd.cups-raw 0 &ndash;
Filter application/vnd.cups-postscript 100 foomatic-rip
Filter application/vnd.cups-pdf 0 foomatic-rip
</del>
After all this, if you’ve copied the PPD file into the right folder (<code>/etc/cups/ppd/</code>), then you’re all set! Restart CUPS with <code>sudo /etc/init.d/cups restart</code> so that your changes take effect. You can print using <code>lp</code> and the <code>-d</code> flag to specify the print queue you want. Remember that we picked the name “andrew-color” for our print queue above, so a sample <code>lp</code> command would look like this:</p>

<p><code>lp -t ‘My First Color Print Job’ -U jezimmer -d andrew-color /path/to/myfile.pdf</code></p>

<p>Happy printing!</p>

<hr />

<br>


<h3>Jake on the Web</h3>

<p><a href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on <a href="http://www.twitter.com/Z1MM32M4N/">Twitter</a>, checking out my tinkerings on <a href="http://www.github.com/Z1MM32M4N/">GitHub</a>, or paying a visit to <a href="http://www.zimmerman.io/">my homepage</a>. I&rsquo;d love to hear what you think about what I&rsquo;ve managed to put together, so feel free to comment, tweet at me, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shiny New Octopress Blog]]></title>
    <link href="http://blog.zimmerman.io/2014/05/06/shiny-new-octopress-blog/"/>
    <updated>2014-05-06T01:41:14-04:00</updated>
    <id>http://blog.zimmerman.io/2014/05/06/shiny-new-octopress-blog</id>
    <content type="html"><![CDATA[<p>The below is a post I originally posted on my first (failed) blog. While that blog didn&rsquo;t work out quite right, I hope to keep many of the same ideals at heart when continuing (and hopefully maintaining) this blog, so I decided I may as well repost it here.</p>

<!-- more -->


<h2>README</h2>

<p>It is currently 2:14am on Wednesday, October 16, 2013. “Today,” (well really yesterday) at a <a href="//scottylabs.org">ScottyLabs</a> meeting (a student organization at Carnegie Mellon (CMU) that lies at the nexus of design and technology), my interest in the group showed through enough to the point where they entrusted a few low-level permissions to help out developing the various projects they’ve been working on right now, namely <a href="//print.scottylabs.org">Print@ScottyLabs</a>. As happens all too often, I am realizing just how much I have to learn: about technology, about college, about people, about everything.</p>

<p>But looking around (maybe I haven’t looked very far), I don’t see one central place where I can go to get help with all of this stuff, or at least the tech stuff. Obviously I can ask people if I really need it. The support structures are supposedly in place. In my experience, though, when you approach people for help on general topics, you get tossed back to the Internet as they say, “Google it.”  While things certainly can be found on the Internet, for someone who just wants to be able to read about the answer without being overwhelmed by the details, it seems like there’s <strong>no good place to start</strong>.</p>

<h2>What I Want</h2>

<p>In this spirit of aggregating pieces of knowledge on the interwebs, I’d like to document my process of learning and researching. Here are a few of my goals:</p>

<h3>Personal Reference</h3>

<p>I want something to look back on if I can’t remember something. Say I’m wondering why in the world I even started this thing: I could look back at this post. It&rsquo;s one thing to be able to find a site you had visited in your history, but it&rsquo;s another to be able to read about exactly what you were using that site to do. Documentation is <em>vastly</em> underappreciated.</p>

<h3>Metacognition</h3>

<p>Everyone says it’s good to think about the way you think. I spent a lot of time in high school contemplating the effects of information overload due to the Internet, and I’m sure that as I start down this process, it’s only going to get deeper. In writing down my thoughts like this, I’d like to get some sort of structure to my learning so that I can keep the floodgates at bay.</p>

<h3>Public Roadmap</h3>

<p>If there are 300+ million people in America and 7+ billion people around the world, then <em>statistically</em>, there <em>has</em> to be someone just like me who’d like to have such a road map. If this is you, it’s my hope that these ramblings are useful.</p>

<h2>Where to Next</h2>

<p>So it’s getting pretty late and I’d like to get back to what I was learning about: MVC. (EDIT: It&rsquo;s still late, and it&rsquo;s even worse this time because I have exams this week&hellip; A+ Jake&hellip;) So hopefully, I’ll have time to keep developing this, whatever “this” is. I’ve been told that “There are only two hard things in Computer Science: cache invalidation, naming things, and off-by-one errors.” I have no idea what cache invalidation is (yet!), but the “naming things” bit is spot on.</p>

<p>So here goes nothing&hellip; I’m sure that in the very least it’ll be fun to look over these entries 5, 10, 20 years from now and think about how quickly things changed.</p>

<hr />

<br>


<h3>Jake on the Web</h3>

<p><a href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on <a href="http://www.twitter.com/Z1MM32M4N/">Twitter</a>, checking out my tinkerings on <a href="http://www.github.com/Z1MM32M4N/">GitHub</a>, or paying a visit to <a href="http://www.zimmerman.io/">my homepage</a>. I&rsquo;d love to hear what you think about what I&rsquo;ve managed to put together, so feel free to comment, tweet at me, or send me an email.</p>
]]></content>
  </entry>
  
</feed>
