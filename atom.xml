<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jake Zimmerman]]></title>
  <link href="http://blog.zimmerman.io/atom.xml" rel="self"/>
  <link href="http://blog.zimmerman.io/"/>
  <updated>2014-05-06T22:06:11-04:00</updated>
  <id>http://blog.zimmerman.io/</id>
  <author>
    <name><![CDATA[Jake Zimmerman]]></name>
    <email><![CDATA[jake@zimmerman.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GitHub Pages Custom Domains]]></title>
    <link href="http://blog.zimmerman.io/blog/2014/05/06/github-pages-custom-domains/"/>
    <updated>2014-05-06T03:15:35-04:00</updated>
    <id>http://blog.zimmerman.io/blog/2014/05/06/github-pages-custom-domains</id>
    <content type="html"><![CDATA[<p>I stumbled at first getting the DNS configured for my blog, because I&rsquo;ve got a slighty more complicated setup than normal. I decided to supplement the documentation <a href="https://pages.github.com/">GitHub Pages</a> gives by recounting my personal example and the setup that worked.</p>

<!-- more -->


<p>If you&rsquo;ve never heard of <a href="https://pages.github.com/">GitHub Pages</a> for web hosting, you should definitely check it out. You basically get free hosting for any static (i.e. plain HTML or <a href="http://jekyllrb.com/">Jekyll</a>-served) website with git-push-to-deploy. You can even configure your site to be listed at a custom domain according to <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages">these</a> instructions, which are pretty thorough. I feel like it&rsquo;d help, though, to supplement this documentation with a fairly common example setup.</p>

<h2>My setup</h2>

<p>I have two sites which I want to host using the <code>zimmerman.io</code> domain name: my <a href="//blog.zimmerman.io">blog</a> and my <a href="//www.zimmerman.io">personal site</a>. I host my personal site at <a href="//www.zimmerman.io">www.zimmerman.io</a>, but you can also navigate to <a href="//zimmerman.io">zimmerman.io</a> and end up in the same places as before. It&rsquo;s served as a User Page from <a href="https://www.github.com/Z1MM32M4N/z1mm32m4n.github.io">this repo</a>.</p>

<p>I host my blog at <a href="//blog.zimmerman.io">blog.zimmerman.io</a>, and it&rsquo;s served as a Project Page in <a href="https://www.github.com/Z1MM32M4N/blog/">this repo</a>.</p>

<h2>What the instructions say</h2>

<p>The instructions say a few things very clearly (yay, documentation!).</p>

<p>First, if I want to use a custom subdomain (like what I&rsquo;m doing for my blog) to host a repo, I can add a <code>CNAME</code> record with my DNS provider that points to what is in my case <code>z1mm32m4n.github.io</code>. This was counterintuitive to me, because I thought at first that this would make my blog.zimmerman.io domain redirect to my personal site, but that&rsquo;s not how GitHub handles it. (They&rsquo;re smarter than that.)</p>

<p>At the same time, I need to put a file in the root of the blog&rsquo;s repo (in the <code>gh-pages</code> branch because it&rsquo;s a Project Page), called <code>CNAME</code> (<a href="https://github.com/Z1MM32M4N/blog/blob/gh-pages/CNAME">view source</a>) with the contents &lsquo;blog.zimmerman.io&rsquo;. After a little while, the DNS tables will update and everything here should work: I can now view my <em>blog</em> where I want it.</p>

<h2>What the instructions say, but not so clearly</h2>

<p>The next bit gave me some trouble at first (probably just because I was being impatient while the DNS tables were updating). The end goal was to have the <code>www</code> subdomain host my site and have the <code>@</code> (top-level or apex) domain redirect there. If you read carefully, the instructions say to do three things:</p>

<ol>
<li> Make the <code>CNAME</code> file (<a href="https://github.com/Z1MM32M4N/z1mm32m4n.github.io/blob/master/CNAME">view source</a>) in my (User) Pages repository contain <code>www.zimmerman.io</code>. <strong>This</strong> is the domain at which I do want my site to be visible.</li>
<li> Create a <code>CNAME</code> record with my DNS provider pointing to <code>z1mm32m4n.github.io</code> for the <code>www</code> subdomain. From a technical standpoint on the DNS provider&rsquo;s side of things, this is the same thing we did before with the <code>blog</code> subdomain.</li>
<li> Create an <code>A</code> record pointing the <code>@</code> domain towards GitHub using the IP address they specify.</li>
</ol>


<p>This last step is where you have to have a little faith: nowhere is there an explicit file telling GitHub, &ldquo;If you get a request from zimmerman.io, send it to me!&rdquo; GitHub merely notices that there <strong>is</strong> a repo with a CNAME containing &lsquo;<strong>www</strong>.zimmerman.io&rsquo;, and so they say, &ldquo;Well, we may as well send this <strong>top level</strong> domain to the <strong>www</strong> domain referenced over here&hellip; I&rsquo;ve got nothing better to do.&rdquo;</p>

<p>This was a little confusing at first, because if I wanted the opposite direction (www.zimmerman.io to redirect to zimmerman.io), I would have still created a CNAME file, but it would have contained <code>zimmerman.io</code> and I would have created an <code>A</code> record with my DNS provider, not an actual CNAME. (I still did have to create both the <code>A</code> and <code>CNAME</code> in the end, but in this setup, the <code>A</code> record is referenced in the <code>CNAME</code> file, if that makes any sense.)</p>

<h2>Recap</h2>

<h3>My CNAME Files</h3>

<ul>
<li> For www.zimmerman.io:

<ul>
<li> CNAME file contains <code>www.zimmerman.io</code></li>
<li> CNAME file resides in <code>master</code> branch of User Pages repo for Z1MM32M4N</li>
</ul>
</li>
<li> For blog.zimmerman.io

<ul>
<li> CNAME file contains <code>blog.zimmerman.io</code></li>
<li> CNAME file resides in <code>gh-pages</code> branch of Project Pages repo for Z1MM32M4N/blog</li>
</ul>
</li>
</ul>


<h3>My DNS Config</h3>

<p>Here&rsquo;s a screenshot of what my records look like with my DNS provider, in case this was still unclear.</p>

<p><img src="http://blog.zimmerman.io/images/DNS-config.jpg"></p>

<p>I&rsquo;m personally using <a href="https://www.gandi.net/">Gandi</a> for domain registration because they had the cheapest <code>.io</code> TLD registration, but their interface takes some getting used to. (It was certainly still worth the deal I got.)</p>

<hr />

<br>


<h3>Jake on the Web</h3>

<p><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="125" height="125">
If you cared enough to read that far, you should consider following me on <a href="http://www.twitter.com/Z1MM32M4N/">Twitter</a>, checking out my tinkerings on <a href="http://www.github.com/Z1MM32M4N/">GitHub</a>, or paying a visit to <a href="http://www.zimmerman.io/">my homepage</a>. I&rsquo;d love to hear what you think about what I&rsquo;ve managed to put together, so feel free to comment, tweet at me, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding a Network Printer to a Linux Server]]></title>
    <link href="http://blog.zimmerman.io/blog/2014/05/06/adding-a-network-printer-to-a-linux-server/"/>
    <updated>2014-05-06T02:09:29-04:00</updated>
    <id>http://blog.zimmerman.io/blog/2014/05/06/adding-a-network-printer-to-a-linux-server</id>
    <content type="html"><![CDATA[<p>It&rsquo;s one thing to plug in a CD, click through a few dialogs, and wait for the computer to chime at you saying that your printer has been installed. Unfortunately, this is not how server administration works. Here&rsquo;s my account of installing multiple network-attached printers on a Debian server.</p>

<!-- more -->


<p></p>

<h2>TL;DR</h2>

<p>For those who only care about the solution: <a href="#tldr">TL;DR</a>.</p>

<h2>The Hard Way</h2>

<p>As I mentioned in my last post, I&rsquo;m a part of a student organization called <a href="//www.scottylabs.org">ScottyLabs</a>. We do tons of cool things, but the project which I&rsquo;m currently working on is <a href="//print.scottylabs.org">Print@ScottyLabs</a>. It&rsquo;s a really handy service which lets you send an attachment to <a href="&#109;&#x61;&#x69;&#108;&#116;&#111;&#x3a;&#112;&#x72;&#x69;&#x6e;&#116;&#x40;&#x73;&#x63;&#x6f;&#x74;&#x74;&#121;&#x6c;&#x61;&#x62;&#115;&#x2e;&#111;&#x72;&#103;">&#x70;&#x72;&#105;&#x6e;&#x74;&#x40;&#115;&#x63;&#x6f;&#x74;&#116;&#121;&#108;&#97;&#x62;&#115;&#x2e;&#111;&#x72;&#103;</a> and have it sent to the printer. I&rsquo;m currently in the process of rewriting much of the code base from scratch to support a plethora of highly-requested features, so there will no doubt be more posts about my exploits.</p>

<p>Luckily, CMU (and arguably every college) is not terribly notable for keeping up-to-date information on it&rsquo;s website. This means that I got the &ldquo;wonderful&rdquo; opportunity to dig through CUPS documentation, sketchy printer manufacturer websites, and the depths of the Internet to finagle together a solution. Here&rsquo;s to hoping that you have a far more pleasurable experience. Without further ado, these are the steps I went through to get it done.</p>

<h2>What Didn&rsquo;t Work</h2>

<p>The Common Unix Printing System (CUPS) is a relatively new standard which is designed to improve over the rather haphazard methods used for printing in the past. It improves in a lot of ways and has a few neat features. One of these is a handy web interface which lets you interact with your configuration files, add printers, view the print queue, etc. through a beginner-friendly GUI, which described me perfectly when I started and still does now.</p>

<p>By default, when <code>cupsd</code> (the CUPS daemon) starts up, it listens on <code>http://localhost:631</code> incoming HTTP requests. By default, external requests are refused. You can either enable these in a configuration file somewhere or <a href="http://ubuntuguide.org/wiki/Using_SSH_to_Port_Forward">tunnel your traffic</a> through an <code>ssh</code> proxy, &ldquo;tricking&rdquo; the server into thinking your requests are coming locally. Additionally, you must be either <code>root</code> or in the <code>lpadmin</code> group to access the administration parts of this web GUI.</p>

<p>But for whatever reason, neither using the <code>root</code> username and password nor adding myself to the <code>lpadmin</code> group worked. I was incessantly blocked by the interface when I tried to give it my credentials. Defeated, I needed to find another way.</p>

<p>I’m telling you this as a sort of justification for the super hacky solution that I came up with (but that works in the end, even if it’s non-standard). If you have any ideas on why this failed, I&rsquo;d love to hear them!</p>

<h2>When in doubt, duct tape</h2>

<p>The instructions to install CMU print drivers on Linux only work for environments with desktop environments installed. (You can read these instructions <a href="http://www.cmu.edu/computing/clusters/printing/how-to/linux/pers-cluster.html">here</a>). So, in keeping with the UNIX philosophy that everything’s a file, the solution I came up with was essentially to follow these instructions on a <strong>personal Linux box</strong>, then <strong>copy and modify</strong> the corresponding files to achieve the same effect on the server we need them to be on.</p>

<p>It’s at this point that you’re probably wondering why I didn’t just do a little research and figure out how to make these modifications myself, or perhaps figure out where the files I needed were coming from. There are a couple of reasons. First, that takes a lot of time, I&rsquo;m lazy, and whatever I came up with didn&rsquo;t need to scale. Second, when you install a CUPS printer, you need a PostScript Printer Description (PPD) file to tell CUPS how the printer works. Despite my best efforts searching the web, I couldn’t find a central repository where these .ppd files were stored. However, most desktop environments have the ability to search <strong>somewhere mystical</strong> (read: you should tell me if you know) and download these .ppd files.</p>

<p><a name="tldr"></a></p>

<h2>Do you think I really care, just tell me how it works</h2>

<p>The process is not too complicated. Go back to the <a href="http://www.cmu.edu/computing/clusters/printing/how-to/linux/pers-cluster.html">CMU instructions</a> to install a printer on a personal Linux machine. Following them should be fairly self explanatory. Say perhaps that you want to install the print drivers for the queue <code>andrew-color</code>. After following along and inserting “andrew-color” as the print queue where required, you’ll come up to a screen that asks you to name your printer. This name does not have to be the name of the queue, but I always make it that when I&rsquo;m working with the CMU printers. Either way, be sure to remember what you entered for this name (again, I’m using the name “andrew-color”).</p>

<p>Also, part of the process should involve you specifying a PPD file. The easiest way to do this is to go to a printer that dispatches jobs from that queue and to get the make and model for it. In the case of andrew-color, the Wean printer is an HP Color LaserJet CP6015x. Using this information, we can use the Gnome/KDE/XFCE window, enter our make and model, and have it spit out the recommended PPD file to use (although it likely won&rsquo;t call as such).</p>

<p>Now that everything is all installed, we can pluck the information we need. If you’re on a standard Linux install, your CUPS files will be in <code>/etc/cups</code>. The specific files that are of interest to us are <code>/etc/cups/printers.conf</code> and <code>/etc/cups/ppd/&lt;your-printer-name&gt;.ppd</code>, so my file is called <code>/etc/cups/ppd/andrew-color.ppd</code>. We need the entire .ppd file, and it will go into the corresponding directory on our server. As for <code>printers.conf</code>, we just need a specific entry. This file is a list of all the installed printers, each wrapped in <code>&lt;Printer your-printer-name&gt;&lt;/Printer&gt;</code> tags. Yank this text however you want from your local computer to the server, and add it to the corresponding <code>printers.conf</code> file. If your personal Linux machine made the <code>&lt;Printer&gt;&lt;/Printer&gt;</code> tags into <code>&lt;DefaultPrinter x&gt;&lt;/DefaultPrinter&gt;</code> tags, go ahead and change this to just <code>&lt;Printer x&gt;&lt;/Printer&gt;</code>. To recap, now I’ve got about 20 lines of additional configuration data added to the <code>printers.conf</code> file on my server, beginning with the line <code>&lt;Printer andrew-color&gt;</code> and ends with the line <code>&lt;/Printer&gt;</code>.</p>

<p>For my installation, I have one more thing to do. Somewhere in the middle of this entry, there is a line which reads something like <code>Filter application/vnd.cups-postscript 0 hpps</code>. CUPS has a filtering functionality that lets you interact with the data before it gets printed, which you can read more about <a href="http://en.wikipedia.org/wiki/CUPS#Filtering_process">here</a>. We want to make sure that we use the <code>foomatic</code> filters (because that&rsquo;s how our server is configured), so we have to change the existing filters so that they read
<del>
Filter application/vnd.cups-raw 0 &ndash;
Filter application/vnd.cups-postscript 100 foomatic-rip
Filter application/vnd.cups-pdf 0 foomatic-rip
</del>
After all this, if you’ve copied the PPD file into the right folder (<code>/etc/cups/ppd/</code>), then you’re all set! Restart CUPS with <code>sudo /etc/init.d/cups restart</code> so that your changes take effect. You can print using <code>lp</code> and the <code>-d</code> flag to specify the print queue you want. Remember that we picked the name “andrew-color” for our print queue above, so a sample <code>lp</code> command would look like this:</p>

<p><code>lp -t ‘My First Color Print Job’ -U jezimmer -d andrew-color /path/to/myfile.pdf</code></p>

<p>Happy printing!</p>

<hr />

<br>


<h3>Jake on the Web</h3>

<p><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="125" height="125">
If you cared enough to read that far, you should consider following me on <a href="http://www.twitter.com/Z1MM32M4N/">Twitter</a>, checking out my tinkerings on <a href="http://www.github.com/Z1MM32M4N/">GitHub</a>, or paying a visit to <a href="http://www.zimmerman.io/">my homepage</a>. I&rsquo;d love to hear what you think about what I&rsquo;ve managed to put together, so feel free to comment, tweet at me, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shiny New Octopress Blog]]></title>
    <link href="http://blog.zimmerman.io/blog/2014/05/06/shiny-new-octopress-blog/"/>
    <updated>2014-05-06T01:41:14-04:00</updated>
    <id>http://blog.zimmerman.io/blog/2014/05/06/shiny-new-octopress-blog</id>
    <content type="html"><![CDATA[<p>The below is a post I originally posted on my first (failed) blog. While that blog didn&rsquo;t work out quite right, I hope to keep many of the same ideals at heart when continuing (and hopefully maintaining) this blog, so I decided I may as well repost it here.</p>

<!-- more -->


<h2>README</h2>

<p>It is currently 2:14am on Wednesday, October 16, 2013. “Today,” (well really yesterday) at a <a href="&lt;//scottylabs.org>&#8220;>ScottyLabs</a> meeting (a student organization at Carnegie Mellon (CMU) that lies at the nexus of design and technology), my interest in the group showed through enough to the point where they entrusted a few low-level permissions to help out developing the various projects they’ve been working on right now, namely <a href="&lt;//print.scottylabs.org>&#8220;>Print@ScottyLabs</a>. As happens all too often, I am realizing just how much I have to learn: about technology, about college, about people, about everything.</p>

<p>But looking around (maybe I haven’t looked very far), I don’t see one central place where I can go to get help with all of this stuff, or at least the tech stuff. Obviously I can ask people if I really need it. The support structures are supposedly in place. In my experience, though, when you approach people for help on general topics, you get tossed back to the Internet as they say, “Google it.”  While things certainly can be found on the Internet, for someone who just wants to be able to read about the answer without being overwhelmed by the details, it seems like there’s <strong>no good place to start</strong>.</p>

<h2>What I Want</h2>

<p>In this spirit of aggregating pieces of knowledge on the interwebs, I’d like to document my process of learning and researching. Here are a few of my goals:</p>

<h3>Personal Reference</h3>

<p>I want something to look back on if I can’t remember something. Say I’m wondering why in the world I even started this thing: I could look back at this post. It&rsquo;s one thing to be able to find a site you had visited in your history, but it&rsquo;s another to be able to read about exactly what you were using that site to do. Documentation is <em>vastly</em> underappreciated.</p>

<h3>Metacognition</h3>

<p>Everyone says it’s good to think about the way you think. I spent a lot of time in high school contemplating the effects of information overload due to the Internet, and I’m sure that as I start down this process, it’s only going to get deeper. In writing down my thoughts like this, I’d like to get some sort of structure to my learning so that I can keep the floodgates at bay.</p>

<h3>Public Roadmap</h3>

<p>If there are 300+ million people in America and 7+ billion people around the world, then <em>statistically</em>, there <em>has</em> to be someone just like me who’d like to have such a road map. If this is you, it’s my hope that these ramblings are useful.</p>

<h2>Where to Next</h2>

<p>So it’s getting pretty late and I’d like to get back to what I was learning about: MVC. (EDIT: It&rsquo;s still late, and it&rsquo;s even worse this time because I have exams this week&hellip; A+ Jake&hellip;) So hopefully, I’ll have time to keep developing this, whatever “this” is. I’ve been told that “There are only two hard things in Computer Science: cache invalidation, naming things, and off-by-one errors.” I have no idea what cache invalidation is (yet!), but the “naming things” bit is spot on.</p>

<p>So here goes nothing&hellip; I’m sure that in the very least it’ll be fun to look over these entries 5, 10, 20 years from now and think about how quickly things changed.</p>

<hr />

<br>


<h3>Jake on the Web</h3>

<p><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="125" height="125">
If you cared enough to read that far, you should consider following me on <a href="http://www.twitter.com/Z1MM32M4N/">Twitter</a>, checking out my tinkerings on <a href="http://www.github.com/Z1MM32M4N/">GitHub</a>, or paying a visit to <a href="http://www.zimmerman.io/">my homepage</a>. I&rsquo;d love to hear what you think about what I&rsquo;ve managed to put together, so feel free to comment, tweet at me, or send me an email.</p>
]]></content>
  </entry>
  
</feed>
