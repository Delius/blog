<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Bits, Bytes, and Words]]></title>
  <link href="https://blog.zimmerman.io/categories/git/atom.xml" rel="self"/>
  <link href="https://blog.zimmerman.io/"/>
  <updated>2015-01-24T16:05:38-05:00</updated>
  <id>https://blog.zimmerman.io/</id>
  <author>
    <name><![CDATA[Jake Zimmerman]]></name>
    <email><![CDATA[jake@zimmerman.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mastering Git Log for Collaboration]]></title>
    <link href="https://blog.zimmerman.io/2015/01/16/mastering-git-log-for-collaboration/"/>
    <updated>2015-01-16T20:57:01-05:00</updated>
    <id>https://blog.zimmerman.io/2015/01/16/mastering-git-log-for-collaboration</id>
    <content type="html"><![CDATA[<p>Git is an incredibly powerful platform for collaboration. The ability to create
light-weight branches as well as push to and pull from multiple remote repos is
the foundation of this power. Learning to harness the <code>git log</code> command will
help with visualizing all the information that supports these features, refining
and invigorating your current workflows.</p>

<!-- more -->


<h2>Learn Git Branching</h2>

<p>Obviously, to take full advantage of the collaborative features of Git, you
first have to learn how to use Git branching. There&rsquo;s an <a href="http://pcottle.github.io/learnGitBranching/">excellent interactive
tutorial</a> that instructs by converting the Git commands you
run into fancy web animations. If you have a basic understanding of Git but have
always wanted to learn about some of its more powerful features, this is the
best tutorial out there. For a taste of how it works, there&rsquo;s also a
<a href="http://pcottle.github.io/learnGitBranching/?demo">non-interactive demo</a> that features the animations which make this
tutorial so well-designed.</p>

<p>After I ran through this tutorial, I felt for the first time like I <em>really</em>
knew Git. Unfortunately, being a visual learner, I struggled when trying to
apply the same abstractions to actual git repositories. Shortly thereafter, I
discovered that the <code>git log</code> command actually has features to replicate many of
the same visualizations, but from right within the terminal!</p>

<h2><code>git log</code></h2>

<p>The following is a set of shell aliases that let you run <code>git log</code> with a
lengthy set of flags culminating in some pretty awesome Git logs. I&rsquo;m going to
leave a discussion of what the individual flags do to the man pages and just
skip straight to the good part. Feel free to copy and paste these into your
<code>~/.bashrc</code>, <code>~/.zshrc</code>, or similar file.</p>

<pre><code class="bash pretty git log aliases"># pretty Git log
alias gl='git log --graph --pretty="%C(bold green)%h%Creset%C(auto)%d%Creset %s"'

# pretty Git log, all references
alias gll='gl --all'

# pretty Git log, show authors
alias gla='git log --graph --pretty="%C(bold green)%h%Creset %C(yellow)%an%Creset%C(auto)%d%Creset %s"'

# pretty Git log, all references, show authors
alias glla='gla --all'
</code></pre>

<p>As you can see, there are four aliases, and each does something a little
different. The first, <code>gl</code>, just shows the graph for the current branch. <code>gll</code>
shows the graph for <em>all</em> branches, including those which may have diverged from
the current branch. Then there&rsquo;s a variation on each of these, <code>gla</code> and
<code>glla</code>, which add author information to the logs produced by their
companion.</p>

<p>On top of it all, I&rsquo;ve customized the colors to work especially nicely if you&rsquo;re
using the <a href="ethanschoonover.com/solarized">Solarized</a> color scheme in your terminal. If you don&rsquo;t do
anything but copy the above aliases, the only thing that will look different
from the screenshots below is the text between the parentheses, which will
instead all be the same color. To color these the same as below, add this text to
the end of your <code>~/.gitconfig</code> file:</p>

<pre><code class="plain Global Git configuration settings">[color "decorate"]
  head = bold white
  branch = bold magenta
  remotebranch = blue
  tag = bold red
</code></pre>

<p>Of course, feel free to tinker with these colors to your liking.</p>

<h2>Screenshots</h2>

<p>Here are an abundant number of screenshots showing what the commands look like
for the <a href="https://github.com/ScottyLabs/tartanhacks">TartanHacks website</a> and the <a href="https://github.com/autolab/Autolab">Autolab Project</a>.</p>

<h3>gl</h3>

<p><a class="image-link" href="/images/gl-tartanhacks.png"><img src="/images/gl-tartanhacks.png"></a></p>

<p>Even when just using <code>gl</code>, you&rsquo;ll be able to see all branches that lie further
down on the tree. For example, from the <code>add_gitignore</code> branch we can see the
<code>origin/gh-pages</code> branch because it&rsquo;s along the same path in history.</p>

<h3>gll</h3>

<p><a class="image-link" href="/images/gll-tartanhacks.png"><img src="/images/gll-tartanhacks.png"></a></p>

<p>Here we see that multiple branches have diverged from <code>origin/gh-pages</code>; both
<code>add_gitignore</code> and <code>fix_seo_and_readability</code> share <code>origin/gh-pages</code> as a
common ancestor, but neither have anything in common with the other, which is
why <code>fix_seo_and_readability</code> only showed up once we used <code>gll</code>.</p>

<h3>gla</h3>

<p><a class="image-link" href="/images/gla-tartanhacks.png"><img src="/images/gla-tartanhacks.png"></a></p>

<p>Same as <code>gl</code> above, but with author information!</p>

<h3>glla</h3>

<p><a class="image-link" href="/images/glla-tartanhacks.png"><img src="/images/glla-tartanhacks.png"></a></p>

<p>Same as <code>gll</code> above, but again with author information!</p>

<hr />

<p>Here are the same four examples, but for the <a href="https://github.com/autolab/Autolab">Autolab</a> repo. It&rsquo;s a
little more involved because more people are working on it simultaneously. For
projects like this, which have several open pull requests and feature branches,
these aliases really shine.</p>

<h3>gl</h3>

<p><a class="image-link" href="/images/gl-autolab.png"><img src="/images/gl-autolab.png"></a></p>

<h3>gll</h3>

<p><a class="image-link" href="/images/gll-autolab.png"><img src="/images/gll-autolab.png"></a></p>

<h3>gla</h3>

<p><a class="image-link" href="/images/gla-autolab.png"><img src="/images/gla-autolab.png"></a></p>

<h3>glla</h3>

<p><a class="image-link" href="/images/glla-autolab.png"><img src="/images/glla-autolab.png"></a></p>

<h2>Dotfiles</h2>

<p>If you&rsquo;re hungry for more handy Git aliases or just some general ways to beef up
your terminal experience, you can find these four aliases and more in the
<a href="https://github.com/Z1MM32M4N/dotfiles/blob/master/zshrc">zshrc</a> in my <a href="https://github.com/Z1MM32M4N/dotfiles">dotfiles repository</a> on GitHub.</p>

<h2>Update</h2>

<p>After testing out these aliases on various environments, I discovered that one
of the features I was using in the pretty format (the one that colors remotes
and branches, <code>%C(auto)</code>) is not available in older versions of Git. These are
the revised versions of the above aliases that I use on older machines:</p>

<pre><code class="bash Compatible Git log aliases"># pretty Git log
alias gl='git log --graph --pretty="%C(bold green)%h%Creset%C(blue)%d%Creset %s"'

# pretty Git log, all references
alias gll='gl --all'

# pretty Git log, show authors
alias gla='git log --graph --pretty="%C(bold green)%h%Creset %C(yellow)%an%Creset%C(blue)%d%Creset %s"'

# pretty Git log, all references, show authors
alias glla='gla --all'
</code></pre>

<p>The only real difference is that all the remotes, branches, and tags are blue,
instead of being configurable in you <code>~/.gitconfig</code> file.</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: https://www.github.com/Z1MM32M4N/
 [h]: https://www.zimmerman.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Multiple Git Remotes]]></title>
    <link href="https://blog.zimmerman.io/2014/11/01/using-more-than-one-git-remote/"/>
    <updated>2014-11-01T18:12:35-04:00</updated>
    <id>https://blog.zimmerman.io/2014/11/01/using-more-than-one-git-remote</id>
    <content type="html"><![CDATA[<p>Quite often when using git, you only need to use one remote: <code>origin</code>. All your pushes and pulls communicate with this one host. However, there are many occasions when using multiple Git remotes is incredibly handy.</p>

<!-- more -->


<h2>Quick Overview: Remotes</h2>

<p>If you haven&rsquo;t already, I strongly recommend that you check out these two Git resources:</p>

<ul>
<li><a href="http://pcottle.github.io/learnGitBranching/"><strong>Learn Git Branching</strong></a>, an interactive walkthrough of some powerful Git features</li>
<li><a href="https://wildlyinaccurate.com/a-hackers-guide-to-git"><strong>A Hacker&rsquo;s Guide to Git</strong></a>, an explanation of Git by &ldquo;taking a peek under the hood&rdquo;</li>
</ul>


<p>In this article, I&rsquo;ll only be talking about remotes. Remotes are basically &ldquo;mirrors&rdquo; of a branch that you have locally, but on a different computer.</p>

<h2>Scenario: Working with Code in 15-150</h2>

<p>At CMU, the class 15-150 distributes its starter code in a beautiful way: using Git! This opens up a number of things we can take advantage of, but there&rsquo;s one thing in particular we can do using multiple git remotes.</p>

<p>In 15-150, the code is distribute in a read-only Git repo. If we want a place where we can push and pull our changes, we&rsquo;ll need to create our own <em>bare repo</em> (a repo that&rsquo;s used just for pushing and pulling). You&rsquo;ll note that I said push <em>and pull</em>. The reason why I want to be able to pull is because I want to have 2 clones of this repo: one on the CMU Andrew Unix servers (where the 15-150 code is hosted), and one on my laptop, where there&rsquo;s no network latency to edit files in Vim.</p>

<p>To achieve this setup, the first thing we&rsquo;ll do is set up the bare repo. The best place to put a bare repo is on a server so that you can always access your code. So from Andrew, I&rsquo;ll run the commands:</p>

<pre><code class="bash Initialize the Bare Repo"># (unix.andrew.cmu.edu)
#
# change into a new, private directory so that no one can read my homework
$ mkdir -p ~/private/gitrepos/15150
$ cd ~/private/gitrepos/15150
$ git init --bare
</code></pre>

<p>This creates a bare repo which I can clone in two different ways: one for if I&rsquo;m on Andrew, one if I&rsquo;m on my laptop.</p>

<pre><code class="bash Clone New Remote"># (unix.andrew.cmu.edu)
#
# Clone over Unix file path to new folder ~/private/15150
$ git clone ~/private/gitrepos/15150 ~/private/15150

# (my laptop)
#
# Clone over ssh (using ssh alias, i.e., if you use `ssh andrew`)
$ git clone ssh://andrew:/afs/andrew/usr/jezimmer/private/15150
# -- or --
# Clone over ssh (without ssh alias,
#            i.e., if you use `ssh jezimmer@unix.andrew.cmu.edu`)
$ git clone ssh://jezimmer@unix.andrew.cmu.edu:/afs/andrew/usr/jezimmer/private/15150
</code></pre>

<p>After I run these commands, I&rsquo;ll get a command that warns me that I&rsquo;ve just cloned an empty repo, which we have. To throw in a few graphics, our setup looks like this right now:</p>

<p><a class="image-link" href="/images/multiple-remotes-1.svg"><img src="/images/multiple-remotes-1.svg"></a></p>

<p>I&rsquo;m representing bare repos as clouds and clones of those repos as squares, with arrows representing whether code can flow from one place to the next. As you can see, to send code back and forth between Andrew and my laptop, I can just push in one place and pull in the other.</p>

<p>Up until now though, we haven&rsquo;t even interacted with the 15-150 handout repo. The last piece involves setting this up.</p>

<pre><code class="bash Add Handout Remote"># Add the 15-150 handout remote so we can get starter code, etc.
# (unix.andrew.cmu.edu)
#
# A common name for the second remote is "upstream", though you could also
# call this remote "handout" if that would be easier to keep straight
$ cd ~/private/15150
$ git remote add upstream /afs/andrew/course/15/150/handout

# (my laptop)
#
# Add remote over ssh with alias
$ git remote add upstream ssh://andrew:/afs/andrew/course/15/150/handout
# -- or --
# Add remote over ssh without alias
$ git remote add upstream ssh://jezimmer@unix.andrew.cmu.edu:/afs/andrew/course/15/150/handout
</code></pre>

<p>Once we run those two lines, our setup looks like this, where arrows point in
the direction data can flow:</p>

<p><a class="image-link" href="/images/multiple-remotes-2.svg"><img src="/images/multiple-remotes-2.svg"></a></p>

<p>After this, we&rsquo;re able to run <code>git pull upstream master</code> to get the 15-150 starter code as it&rsquo;s released. I find this model particularly useful for all my classes, even the ones that don&rsquo;t distribute their code using Git. Having code both on Andrew and on my local machine is a generally handy configuration, and using Git to push the code around to the right places makes my workflow simple.</p>

<p>As always, let me know if something was unclear or incorrect in the comments!</p>

<h2>More Applications</h2>

<p>There are plenty other applications of using multiple remotes with Git. Perhaps the most common is to use them with the <a href="https://help.github.com/articles/fork-a-repo/"><strong>GitHub forking model</strong></a>, which is useful when collaborating on a software development project with others. You can use multiple remotes to do things like resolve merge conflicts in pull requests and to keep your fork up to date with the original repo.</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: https://www.github.com/Z1MM32M4N/
 [h]: https://www.zimmerman.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running a VPS, Log 1: Managing Dotfiles Across Machines]]></title>
    <link href="https://blog.zimmerman.io/2014/06/19/running-a-vps-log-1/"/>
    <updated>2014-06-19T23:10:51-04:00</updated>
    <id>https://blog.zimmerman.io/2014/06/19/running-a-vps-log-1</id>
    <content type="html"><![CDATA[<p>You could say I&rsquo;m a bit of a geek when it comes to configuring my terminal environment; this obsession has led me to concoct ever-elaborate setup scripts and configuration files. On top of this, between my laptop&rsquo;s multiple boot environments, the servers I use for school, work, and ScottyLabs, and now <a href="/2014/06/19/running-a-vps-log-0">metagross</a>, keeping my configuration files in sync is a must. I handle it swiftly using a combination of git and rcm.</p>

<!-- more -->


<h2>My Scripts</h2>

<p>I&rsquo;ve put a decent amount of time into my dotfiles. I like to think they&rsquo;re pretty good. That being said, I&rsquo;m not about to go over every piece of them, because that would bore even me. I might come back to these pieces in a series on getting started with the terminal (aimed at incoming CS freshmen and other up-and-coming hackers), but for now, a link will suffice.</p>

<h4><a href="https://github.com/Z1MM32M4N/dotfiles/">Z1MM32M4N/dotfiles</a></h4>

<h2>rcm + git</h2>

<p>rcm, short for rc file (as in .bash<b>rc</b>, .vim<b>rc</b>) management, is a tool that manages symlinks between dotfiles in one directory and your home directory. This is cool because, once all your config files contained in one folder, they can be tracked with git for version control without having to put your entire <code>$HOME</code> directory inside a git repo.</p>

<p>On a single machine, rcm works like this. You have one directory (usually <code>~/.dotfiles</code>, but configurable to any directory) which stores all the config files. In here, all files which are meant to be tracked and symlinked do <em>not</em> include the prefixed &lsquo;<code>.</code>&rsquo;; instead, it is added as part of the linking process. After installation, which is easily handled through the brew formula, the .deb, or the Makefile, there are a couple of new tools available.</p>

<p>The first worth mentioning is <code>man 7 rcm</code>, which documents what was just installed. Taking a glance at this page, we see that rcm is actually a suite of tools: <code>lsrc</code>, <code>mkrc</code>, <code>rcdn</code>, and <code>rcup</code>. While all these tools are useful, the most important is <code>rcup</code>. After collecting all your dotfiles into <code>~/.dotfiles</code>, simply executing <code>rcup</code> symlinks all the necessary files to their appropriate locations.</p>

<p>From here, you get all the benefits of git, like pushing to GitHub, collaborating with others, lightweight branching, and syncing files easily even when your workflow is distributed across many servers.</p>

<h2>Caveats</h2>

<p>To be fair, I don&rsquo;t use <code>rcm</code> in the way I think it&rsquo;s creators imagined it would be used. Specifically, the software includes certain provisions to designate which files should affect various machines using a tag system. While it could possibly work, in my mind it&rsquo;s much more tedious than what I&rsquo;ve come up with.</p>

<p>Succinctly, the issue is this: when cloning a repo and running <code>rcup</code> for the first time, you can&rsquo;t easily say &ldquo;this is my VPS, it&rsquo;s running Debian GNU/Linux, has these system binaries installed, and therefore should start up using these methods and scripts&rdquo;. For this, we&rsquo;re on our own.</p>

<h2>Installation</h2>

<p>The solution I came up with regarding a multiple-environment workflow deals with handling all the necessary machine-dependent configuration within my dotfiles <em>themselves</em>. That way I can minimize code reuse and have everything in one convenient file. As a result, <a href="https://github.com/Z1MM32M4N/dotfiles/tree/master/bash_profile">my bash_profile</a> is a bit lengthy at about 300 lines, and it has three large case statements, but I make all this up through deployment. Deployment is <strong>incredibly</strong> swift. Again, You can take a look at the file to see how it works, but when I had finished <a href="/2014/06/19/running-a-vps-log-1">locking down my server</a>, these are the only configuration commands I had to run:</p>

<p><figure class='code'><figcaption><span>Installing rcm and dotfiles </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;install rcm using deb and dpkg&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>wget &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://thoughtbot.github.io/rcm/debs/rcm_1.2.3-1_all.deb&quot;</span>&gt;https://thoughtbot.github.io/rcm/debs/rcm_1.2.3-1_all.deb&lt;/a&gt;
</span><span class='line'><span class="nv">$ </span>sudo dpkg -i rcm_1.2.3-1_all.deb&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;clone dotfiles down, into the ~/.dotfiles directory&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>git clone &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/Z1MM32M4N/dotfiles&quot;</span>&gt;https://github.com/Z1MM32M4N/dotfiles&lt;/a&gt; ~/.dotfiles&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;make the symlinks&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>rcup
</span></code></pre></td></tr></table></div></figure></p>

<p>Voilà! After that, I had my sick bash prompt, my <a href="/2014/06/11/update-your-software-its-the-law/">snazzy update function</a>, my delightful vim colorscheme, solarized dir colors&ndash;the list goes on and on.</p>

<p>Sure, it&rsquo;s taken a bit of effort to get the point where I can run these commands and have it Just Work, but doing that work once means that from now on, whenever I sit down at a new work computer, a new VPS, a new laptop, or some other workstation, I&rsquo;m only a few commands away from my favorite settings.</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: https://www.github.com/Z1MM32M4N/
 [h]: https://www.zimmerman.io/
</p>
]]></content>
  </entry>
  
</feed>
