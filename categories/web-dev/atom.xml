<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web-dev | Jake Zimmerman]]></title>
  <link href="http://blog.zimmerman.io/categories/web-dev/atom.xml" rel="self"/>
  <link href="http://blog.zimmerman.io/"/>
  <updated>2014-06-09T23:37:24-04:00</updated>
  <id>http://blog.zimmerman.io/</id>
  <author>
    <name><![CDATA[Jake Zimmerman]]></name>
    <email><![CDATA[jake@zimmerman.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HPSTR: An Octopress Theme]]></title>
    <link href="http://blog.zimmerman.io/2014/06/04/hpstr-an-octopress-theme/"/>
    <updated>2014-06-04T21:51:41-04:00</updated>
    <id>http://blog.zimmerman.io/2014/06/04/hpstr-an-octopress-theme</id>
    <content type="html"><![CDATA[<p>In case you didn&rsquo;t notice, we&rsquo;re rocking a new theme: <a href="https://github.com/Z1MM32M4N/hpstr-theme">HPSTR for Octopress</a>! Ported from the <a href="https://github.com/mmistakes/hpstr-jekyll-theme">theme of the same name</a> for Jekyll, this theme has a bunch of cool new features that make the theme easier to use and more customizable.</p>

<!-- more -->


<p>Before I begin, I have to give a huge shout out to <a href="https://github.com/mmistakes/">mmistakes</a> for crafting such an impeccable set of stylesheets and Jekyll templates. I could talk this theme up all day, but I think that the results speak for themselves. Even more praiseworthy is that the entire source code is licensed under the GPL, enabling anyone to take the source and build upon it. And on that note, I&rsquo;d like to unveil what <em>I&rsquo;ve</em> built.</p>

<h1>Ported to Octopress</h1>

<p>The theme was originally implemented for a vanilla Jekyll blog. Personally, I find the automation tools provided by Octopress to be incredibly helpful, and I didn&rsquo;t want to give these up to be able to deploy this theme. As a result, I had to tweak a few things in order to get it to work with a standard Octopress installation.</p>

<h2>Less to Sass</h2>

<p>The HPSTR theme was originally built using Less to compile its stylesheets. Octopress uses Sass under Compass instead&mdash;a decision which I love: the rich library of plugins that Compass provides is ridiculous. Thus, this was the first step of the port.</p>

<p>After a quick Google search I stumbled upon <a href="http://stackoverflow.com/questions/14970224/anyone-know-of-a-good-way-to-convert-from-less-to-sass">this question</a> on Stack Overflow, which surprisingly took care of the vast majority of the conversion, leveraging mere text replacement. From there, it was mostly a matter of slugging through the Less docs to find out what a particular function did, jumping over to the Compass/Sass docs to find a corresponding mixin, and repeating.</p>

<h2>Sass to Compass</h2>

<p>I didn&rsquo;t stop after I had the vanilla Sass working. One of Compass&rsquo;s coolest features is that you don&rsquo;t have to repeat yourself: there are mixins for seemingly everything, and when there aren&rsquo;t, there are 3<sup>rd</sup> party plugins. Thus, the next phase of the port was to see how much of the code I could reduce to compass mixins.</p>

<p>For the most part, this stage affected CSS3 properties which need vendor prefixes, to include keyframe animations. The keyframe animations are particularly worthy of a mention because I found a handy plugin called <a href="https://github.com/ericam/compass-animation">compass-animation</a> to take care of them. It works as easily as any other Compass mixin, from installation to use.</p>

<h2>Octopress Mannerisms</h2>

<p>There are a few things that Octopress users can expect to be reasonably similar from one deployment to the next, and I wanted to ensure that as many of the features dually implemented by mmistakes and Octopress used the syntax or conformed to the style set forth by Octopress. A small example of this: the <code>page.link</code> and <code>page.external_url</code> properties. Defined by the old and new themes respectively, both accomplish a similar purpose. Each specifies that the main purpose of the post is to link to a different page. Not wanting to break the service for current Octopress users, I tried to convert as many of these subtleties.</p>

<p>On top of this, I restructured a lot of the original code so that someone used to customizing an Octopress theme would feel more at home when checking out the source for this theme, even if some of the particulars were different. This applied mostly to the Sass directory structure, but also to the templates.</p>

<h1>More Powerful Customization</h1>

<p>One of the many ways Octopress adds value on top of Jekyll is the ease with which you can get a Jekyll blog up and running, and subsequently customize and tweak that theme. This was one area where I felt that the original Jekyll theme fell short. The original stylesheets had a somewhat decent set of variables (in <code>less/variables.less</code>) that would allow you to customize the colors and font faces, but the method for customizing the size of the font was wonky (larger values produced smaller fonts), and the various mixins employed to handle setting the sizes were confusing.</p>

<p>To solve this, I added <em>loads</em> of new variables handling the font sizes and line heights on a per-component basis, while also providing a master switch to easily resize everything. My theme also differs here from the original in that it&rsquo;s default font size is slightly larger for normal paragraph text (the whole reason why I cared about customizing the font size in the first place!).</p>

<h1>Like what you see?</h1>

<p>This theme is in no way perfect, from the styles to the compatibility with the vast array of Octopress options. If my support for your favorite feature is lacking or absent altogether, patch it up and submit a pull request on <a href="https://github.com/Z1MM32M4N/hpstr-theme">GitHub</a>!</p>

<p><strong>I&rsquo;d also love to hear about your installation process.</strong> If something didn&rsquo;t quite work out right when installing the theme from GitHub or everything went super smoothly, tell me on GitHub in an issue, on <a href="https://www.twitter.com/Z1MM32M4N">Twitter</a>, in the comments below, or in an <a href="mailto:jake@zimmerman.io">email</a>. Seriously!</p>

<p>- - - - -
<br>
### Jake on the Web
<a href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on [Twitter][t], checking out my tinkerings on [GitHub][g], or paying a visit to [my homepage][h]. I'd love to hear what you think about what I've managed to put together, so feel free to comment, tweet at me, or send me an email.
 [t]: http://www.twitter.com/Z1MM32M4N/
 [g]: http://www.github.com/Z1MM32M4N/
 [h]: http://www.zimmerman.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub Pages Custom Domains]]></title>
    <link href="http://blog.zimmerman.io/2014/05/06/github-pages-custom-domains/"/>
    <updated>2014-05-06T03:15:35-04:00</updated>
    <id>http://blog.zimmerman.io/2014/05/06/github-pages-custom-domains</id>
    <content type="html"><![CDATA[<p>I stumbled at first getting the DNS configured for my blog, because I&rsquo;ve got a slighty more complicated setup than normal. I decided to supplement the documentation <a href="https://pages.github.com/">GitHub Pages</a> gives by recounting my personal example and the setup that worked.</p>

<!-- more -->


<p>If you&rsquo;ve never heard of <a href="https://pages.github.com/">GitHub Pages</a> for web hosting, you should definitely check it out. You basically get free hosting for any static (i.e. plain HTML or <a href="http://jekyllrb.com/">Jekyll</a>-served) website with git-push-to-deploy. You can even configure your site to be listed at a custom domain according to <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages">these</a> instructions, which are pretty thorough. I feel like it&rsquo;d help, though, to supplement this documentation with a fairly common example setup.</p>

<h2>My setup</h2>

<p>I have two sites which I want to host using the <code>zimmerman.io</code> domain name: my <a href="//blog.zimmerman.io">blog</a> and my <a href="//www.zimmerman.io">personal site</a>. I host my personal site at <a href="//www.zimmerman.io">www.zimmerman.io</a>, but you can also navigate to <a href="//zimmerman.io">zimmerman.io</a> and end up in the same places as before. It&rsquo;s served as a User Page from <a href="https://www.github.com/Z1MM32M4N/z1mm32m4n.github.io">this repo</a>.</p>

<p>I host my blog at <a href="//blog.zimmerman.io">blog.zimmerman.io</a>, and it&rsquo;s served as a Project Page in <a href="https://www.github.com/Z1MM32M4N/blog/">this repo</a>.</p>

<h2>What the instructions say</h2>

<p>The instructions say a few things very clearly (yay, documentation!).</p>

<p>First, if I want to use a custom subdomain (like what I&rsquo;m doing for my blog) to host a repo, I can add a <code>CNAME</code> record with my DNS provider that points to what is in my case <code>z1mm32m4n.github.io</code>. This was counterintuitive to me, because I thought at first that this would make my blog.zimmerman.io domain redirect to my personal site, but that&rsquo;s not how GitHub handles it. (They&rsquo;re smarter than that.)</p>

<p>At the same time, I need to put a file in the root of the blog&rsquo;s repo (in the <code>gh-pages</code> branch because it&rsquo;s a Project Page), called <code>CNAME</code> (<a href="https://github.com/Z1MM32M4N/blog/blob/gh-pages/CNAME">view source</a>) with the contents &lsquo;blog.zimmerman.io&rsquo;. After a little while, the DNS tables will update and everything here should work: I can now view my <em>blog</em> where I want it.</p>

<h2>What the instructions say, but not so clearly</h2>

<p>The next bit gave me some trouble at first (probably just because I was being impatient while the DNS tables were updating). The end goal was to have the <code>www</code> subdomain host my site and have the <code>@</code> (top-level or apex) domain redirect there. If you read carefully, the instructions say to do three things:</p>

<ol>
<li> Make the <code>CNAME</code> file (<a href="https://github.com/Z1MM32M4N/z1mm32m4n.github.io/blob/master/CNAME">view source</a>) in my (User) Pages repository contain <code>www.zimmerman.io</code>. <strong>This</strong> is the domain at which I do want my site to be visible.</li>
<li> Create a <code>CNAME</code> record with my DNS provider pointing to <code>z1mm32m4n.github.io</code> for the <code>www</code> subdomain. From a technical standpoint on the DNS provider&rsquo;s side of things, this is the same thing we did before with the <code>blog</code> subdomain.</li>
<li> Create an <code>A</code> record pointing the <code>@</code> domain towards GitHub using the IP address they specify.</li>
</ol>


<p>This last step is where you have to have a little faith: nowhere is there an explicit file telling GitHub, &ldquo;If you get a request from zimmerman.io, send it to me!&rdquo; GitHub merely notices that there <strong>is</strong> a repo with a CNAME containing &lsquo;<strong>www</strong>.zimmerman.io&rsquo;, and so they say, &ldquo;Well, we may as well send this <strong>top level</strong> domain to the <strong>www</strong> domain referenced over here&hellip; I&rsquo;ve got nothing better to do.&rdquo;</p>

<p>This was a little confusing at first, because if I wanted the opposite direction (www.zimmerman.io to redirect to zimmerman.io), I would have still created a CNAME file, but it would have contained <code>zimmerman.io</code> and I would have created an <code>A</code> record with my DNS provider, not an actual CNAME. (I still did have to create both the <code>A</code> and <code>CNAME</code> in the end, but in this setup, the <code>A</code> record is referenced in the <code>CNAME</code> file, if that makes any sense.)</p>

<h2>Recap</h2>

<h3>My CNAME Files</h3>

<ul>
<li> For www.zimmerman.io:

<ul>
<li> CNAME file contains <code>www.zimmerman.io</code></li>
<li> CNAME file resides in <code>master</code> branch of User Pages repo for Z1MM32M4N</li>
</ul>
</li>
<li> For blog.zimmerman.io

<ul>
<li> CNAME file contains <code>blog.zimmerman.io</code></li>
<li> CNAME file resides in <code>gh-pages</code> branch of Project Pages repo for Z1MM32M4N/blog</li>
</ul>
</li>
</ul>


<h3>My DNS Config</h3>

<p>Here&rsquo;s a screenshot of what my records look like with my DNS provider, in case this was still unclear.</p>

<p><a href="/images/DNS-config.jpg"><img src="/images/DNS-config.jpg"></a></p>

<p>I&rsquo;m personally using <a href="https://www.gandi.net/">Gandi</a> for domain registration because they had the cheapest <code>.io</code> TLD registration, but their interface takes some getting used to. (It was certainly still worth the deal I got.)</p>

<p>- - - - -
<br>
### Jake on the Web
<a href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on [Twitter][t], checking out my tinkerings on [GitHub][g], or paying a visit to [my homepage][h]. I'd love to hear what you think about what I've managed to put together, so feel free to comment, tweet at me, or send me an email.
 [t]: http://www.twitter.com/Z1MM32M4N/
 [g]: http://www.github.com/Z1MM32M4N/
 [h]: http://www.zimmerman.io/
</p>
]]></content>
  </entry>
  
</feed>
