<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Bits, Bytes, and Words]]></title>
  <link href="http://blog.zimmerman.io/categories/python/atom.xml" rel="self"/>
  <link href="http://blog.zimmerman.io/"/>
  <updated>2014-12-22T13:20:56-06:00</updated>
  <id>http://blog.zimmerman.io/</id>
  <author>
    <name><![CDATA[Jake Zimmerman]]></name>
    <email><![CDATA[jake@zimmerman.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Virtualenvs]]></title>
    <link href="http://blog.zimmerman.io/2014/12/22/ruby-virtualenvs/"/>
    <updated>2014-12-22T12:52:40-06:00</updated>
    <id>http://blog.zimmerman.io/2014/12/22/ruby-virtualenvs</id>
    <content type="html"><![CDATA[<p>A while back I found a command that removes all Ruby gems installed on a system
when you&rsquo;re using rbenv. It worked great, so I decided to build on top of it.
After a bit of research, I found a much better solution to the problem of
sandboxing Ruby Gems.</p>

<!-- more -->


<h2>Ugh, Ruby&hellip;</h2>

<p>If you&rsquo;re anything like me, you can never do anything right on the first try
using Ruby. On one of these occasions, I got tired of trying to fix it. I
wanted to destroy everything and start over. That&rsquo;s when I found Ian Vaughan&rsquo;s
<a href="https://gist.github.com/IanVaughan/2902499">script</a> that magically removes all gems. I was delighted to see that it
worked perfectly on the first try, and went about the rest of my business.</p>

<h2>Modifications</h2>

<p>There were two ways, though, that what this script&rsquo;s functionality differed
from what I wanted it to do: it always removed <strong>all</strong> the gems, and it left
behind a <code>.ruby_version</code> file after it was used, clobbering any file that might
have been there before.</p>

<p>In my updated script, you can specify a list of ruby versions as arguments, and
it will only gems from those versions instead of all of them.  Also, it saves
and restores the value of the old <code>.ruby_version</code> file once it&rsquo;s done.</p>

<p>The new script is available <a href="https://gist.github.com/Z1MM32M4N/cc2ba08062c6183a489c">as a fork of the original Gist</a> and also as
a part of of <a href="https://github.com/Z1MM32M4N/bin/blob/master/uninstall_gems">my personal bin folder</a>.</p>

<h2>The Underlying Problem: Virtualenv&rsquo;s in Ruby</h2>

<p>After a bit of reflection, I realized I should be trying to solve the underlying
problem: different projects had different dependencies, and gems from one
project were bleeding into gems from another. If you&rsquo;re a Python developer, you
don&rsquo;t have this issue: <a href="http://virtualenvwrapper.readthedocs.org/en/latest/">virtualenvwrapper</a>, <code>pip</code> and <code>requirements.txt</code>
files make this a non-issue.</p>

<p>After looking into a similar Ruby solution, I came up with <a href="http://honza.ca/2011/06/install-ruby-gems-into-virtualenv">this blog
post</a> outlining how you can do the exact same thing using virtualenvs
but with Ruby gems! You should definitely check it out if you&rsquo;re in the same
boat. Add these lines to your virtualenv&rsquo;s <code>postactivate</code> script:</p>

<pre><code class="python $VIRTUAL_ENV/bin/postactivate">export OLD_GEMHOME="$GEM_HOME"
export GEM_HOME="$VIRTUAL_ENV/gems"

export OLD_GEM_PATH="$GEM_PATH"
export GEM_PATH=""

export OLD_PATH="$PATH"
export PATH="$PATH:$GEM_HOME/bin"
</code></pre>

<p>And then add this complementary section to your <code>postdeactivate</code> script:</p>

<pre><code class="python $VIRTUAL_ENV/bin/postactivate">export GEM_HOME="$OLD_BLOG_GEM_HOME"
unset OLD_GEM_HOME

export GEM_PATH="$OLD_BLOG_GEM_PATH"
unset OLD_GEM_PATH

export PATH="$OLD_BLOG_PATH"
unset OLD_PATH
</code></pre>

<p>Now, whenever you install gems, they&rsquo;ll install to the folder
<code>$VIRTUAL_ENV/gems/</code> instead of the system&rsquo;s location, so no gems bleed into
another project!</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on [Twitter][t], checking out my tinkerings on [GitHub][g], or paying a visit to [my homepage][h]. I&#8217;d love to hear what you think about what I&#8217;ve managed to put together, so feel free to comment, tweet at me, or send me an email.
 [t]: http://www.twitter.com/Z1MM32M4N/
 [g]: http://www.github.com/Z1MM32M4N/
 [h]: http://www.zimmerman.io/
</p>
]]></content>
  </entry>
  
</feed>
