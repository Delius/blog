<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vim | Bits, Bytes, and Words]]></title>
  <link href="http://blog.zimmerman.io/categories/vim/atom.xml" rel="self"/>
  <link href="http://blog.zimmerman.io/"/>
  <updated>2014-12-28T22:14:57-06:00</updated>
  <id>http://blog.zimmerman.io/</id>
  <author>
    <name><![CDATA[Jake Zimmerman]]></name>
    <email><![CDATA[jake@zimmerman.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim as a Man Page Viewer]]></title>
    <link href="http://blog.zimmerman.io/2014/12/20/vim-as-a-man-page-viewer/"/>
    <updated>2014-12-20T20:17:46-06:00</updated>
    <id>http://blog.zimmerman.io/2014/12/20/vim-as-a-man-page-viewer</id>
    <content type="html"><![CDATA[<p>Man pages are an essential part of every developer&rsquo;s workflow. Unfortunately,
the default system pager <code>less</code> isn&rsquo;t the best interface. That&rsquo;s why I wrote a
Vim plugin and a short shell function to take care of opening man pages in Vim.</p>

<!-- more -->


<h2>The Plugin</h2>

<p>If you&rsquo;re eager to dive right into the source or to install the plugin, head on
over to the <a href="https://github.com/Z1MM32M4N/vim-superman">GitHub repository</a>. It&rsquo;s a whopping 32 SLOC, so feel
free to peek under the hood.</p>

<h2>Why?</h2>

<p>You might be thinking, &ldquo;But Jake, <code>man</code> works just fine for me, why would I
switch?&rdquo; I&rsquo;m glad you asked!</p>

<h3>Mouse Support</h3>

<p>The first reason why I was interested in getting man pages to open in Vim was
because I wanted to be able to scroll with the mouse. When I have to read man
pages for a long time, usually as a part of some more all-encompasing bit of
research, I find scrolling to be a much better interface for quickly perusing
the content of a man page.</p>

<h3>Syntax Highlighting</h3>

<p>As it turns out, man pages have a syntax to them, and Vim does a pretty
excellent job at highlighting them. Rather than talk about it, here are some
screenshots. Note how code samples (C system calls and library functions) are
also syntax highlighted appropriately.</p>

<pre><code class="bash Example 1">vman vim
</code></pre>

<p><a class="image-link" href="/images/vim.1.png"><img src="/images/vim.1.png"></a></p>

<pre><code class="bash Example 2">vman 3 printf
</code></pre>

<p><a class="image-link" href="/images/printf.3.png"><img src="/images/printf.3.png"></a></p>

<h3>All the benefits of Vim</h3>

<p>While <code>less</code> makes a good effort to emulate certain Vim keybindings (or maybe
it&rsquo;s the other way around, I don&rsquo;t know which came first), <code>less</code> certainly
falls short of the full power of Vim.</p>

<p>For example, once you&rsquo;ve opened a man page in Vim, you can open a new tab or
split side-by-side with the man page. Especially if you&rsquo;re switching between Vim
and the man page often, being able to open man pages in tabs or splits is
invaluable.</p>

<h2>Mine doesn&rsquo;t look like yours!</h2>

<p>A couple of my other plugins are showing in the screenshots above. I&rsquo;m using the
<a href="https://github.com/altercation/vim-colors-solarized">Solarized Dark color scheme</a>, the plugin
<a href="https://github.com/bling/vim-airline">vim-airline</a> to take over the statuslines at the very top and
bottom, and iTerm2 on Mac OS X 10.10.</p>

<p>You can see my complete configuration <a href="https://github.com/Z1MM32M4N/dotfiles">on GitHub</a>.</p>

<h2>Feedback</h2>

<p>As a matter of fact, this was my first Vim plugin! If you notice anything out of
place, even if it&rsquo;s a small detail, I&rsquo;d love to hear it. Make no assumptions
about the reasoning behind why certain decisions were made, because I have none
XD</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: http://www.github.com/Z1MM32M4N/
 [h]: http://www.zimmerman.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Offline LaTeX Development]]></title>
    <link href="http://blog.zimmerman.io/2014/10/06/offline-latex-development/"/>
    <updated>2014-10-06T17:00:00-05:00</updated>
    <id>http://blog.zimmerman.io/2014/10/06/offline-latex-development</id>
    <content type="html"><![CDATA[<p>While online clients like ShareLaTeX or writeLaTeX are popular for getting started with LaTeX quickly, developing LaTeX locally with Vim and the command line is my preferred LaTeX workflow. In this post, I&rsquo;ll describe the changes I&rsquo;ve made that make working with LaTeX on the command line a seamless experience.</p>

<!-- more -->


<h2>Install LaTeX</h2>

<p>Obviously, to work with LaTeX locally, you&rsquo;ll need LaTeX installed. To check if you already have it installed, you can run <code>which pdflatex</code>. If it&rsquo;s installed, this command will tell you the path to program. Otherwise, it won&rsquo;t print anything.</p>

<h3>On Linux</h3>

<p>Installing LaTeX on Linux isn&rsquo;t too bad. Usually it&rsquo;s included in your distribution&rsquo;s package manager. I&rsquo;ll be focusing on OS X for the majority of this post though, so Google around if you end up having trouble.</p>

<h3>On OS X</h3>

<p>To install LaTeX on a Mac, we&rsquo;ll be installing MacTeX, which includes the command line LaTeX utilities as well as a couple graphical clients for LaTeX development. You can try compiling from source, but as Homebrew points out when you try to <code>brew install linux</code>:</p>

<pre><code class="plain brew install latex">$ brew install latex
Error: No available formula for latex
Installing TeX from source is weird and gross, requires a lot of patches,
and only builds 32-bit (and thus can't use Homebrew deps on Snow Leopard.)

We recommend using a MacTeX distribution: http://www.tug.org/mactex/
</code></pre>

<p>With that in mind, head on over to <a href="http://www.tug.org/mactex/">http://www.tug.org/mactex/</a> and download the file <code>MacTeX.pkg</code>. Once this has downloaded and you&rsquo;ve clicked through the installer, you should be ready to go with LaTeX. Verify this by running <code>which pdflatex</code> again.</p>

<h2>Use Vim</h2>

<p>The biggest productivity improvement you gain from developing LaTeX locally is that you get to use Vim. Make sure you have a nice colorscheme for both your terminal and for Vim. <strong>I can&rsquo;t stress enough how important it is to make your terminal look nice</strong>: you want to enjoy your terminal experience, and this is one of the easiest ways to do so.</p>

<h2>Use Make</h2>

<p>Compiling LaTeX is pretty straightforward. To generate a PDF, all you have to do is run the command</p>

<pre><code class="bash pdflatex">$ pdflatex &lt;myfile&gt;.tex
</code></pre>

<p>And you&rsquo;ll get a file called <code>&lt;myfile&gt;.pdf</code> in the current directory, plus some intermediate files. We can go one step further and put a bunch of useful build targets into a Makefile and use it to build our PDF:</p>

<pre><code class="make LaTeX Makefile https://gist.github.com/Z1MM32M4N/b248a409d19c9f1c94cd"># NOTE: Change "written" to the name of your TeX file with no extension
TARGET=written

all: $(TARGET).pdf

## Generalized rule: how to build a .pdf from each .tex
LATEXPDFS=$(patsubst %.tex,%.pdf,$(wildcard *.tex))
$(LATEXPDFS): %.pdf: %.tex
  pdflatex -interaction nonstopmode $(patsubst %.pdf,%.tex,$@)

clean:
  rm *.aux *.log || true

veryclean: clean
  rm $(TARGET).pdf

view: $(TARGET).pdf
  if [ "Darwin" = "$(shell uname)" ]; then open $(TARGET).pdf ; else evince $(TARGET).pdf ; fi

submit: $(TARGET).pdf
  cp $(TARGET).pdf ../

print: $(TARGET).pdf
  lpr $(TARGET).pdf

.PHONY: all clean veryclean view print
</code></pre>

<p>If you save this to a file called <code>Makefile</code> in the same directory as your LaTeX file, we can just run <code>make</code> instead of running <code>pdflatex &lt;myfile&gt;.tex</code>!</p>

<p>As you can see, there are a bunch of other handy targets here:</p>

<ul>
<li><code>make clean</code> will remove all intermediate files that are created.</li>
<li><code>make veryclean</code> will remove all intermediate files and the compiled PDF file.</li>
<li><code>make view</code> will compile the file and then open it up in a PDF viewer (if you&rsquo;re on OS X, or on Linux and have <code>evince</code> installed).</li>
<li><code>make print</code> will send your document to the default printer with the default options for that printer.</li>
<li><code>make submit</code> will copy your file into the parent directory. This is handy when you&rsquo;re working in a subfolder on an assignment to isolate the intermediate files, but your class has provided a handin script that needs the PDF file to be in the parent directory.</li>
</ul>


<h2>Workflow Tips</h2>

<p>Right now, our workflow looks like this:</p>

<ul>
<li>Create TeX file</li>
<li>Edit in Vim</li>
<li>Switch to terminal</li>
<li>Run make view to compile and view</li>
</ul>


<p>We can actually optimize this workflow to one less step: we don&rsquo;t have to get out of Vim to run make!</p>

<p>Vim has a command <code>:make</code> that will look for a Makefile in the current directory and run it&rsquo;s <code>all</code> target. It also takes a target as an optional argument, so we can do <code>:make view</code> to compile and view the document from within Vim!</p>

<p>Taking this one step further, we can add a command to shorten this. If we add</p>

<pre><code class="vim Save, Compile and View in Vim">command WV w | make view
</code></pre>

<p>to our <code>.vimrc</code>, we&rsquo;ll only have to type <code>:WV</code> to save, compile, and view our PDF output.</p>

<h2>Wrap Up</h2>

<p>That&rsquo;s it! I like this experience for a bunch of reasons:</p>

<ul>
<li><strong>It&rsquo;s faster</strong>. Compiling LaTeX without having to wait for a web client to load is really nice.</li>
<li><strong>It&rsquo;s more stable</strong>. You can still edit, compile, and view your work if you don&rsquo;t have access to the Internet.</li>
<li><strong>It&rsquo;s faster</strong>. Using Vim to edit text is much more convenient than a standard text editor.</li>
</ul>


<p>Do you have a LaTeX tip, a fancier Makefile, or a favorite vim plugin for LaTeX? Share it in the comments!</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: http://www.github.com/Z1MM32M4N/
 [h]: http://www.zimmerman.io/
</p>
]]></content>
  </entry>
  
</feed>
