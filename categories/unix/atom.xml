<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Unix | Bits, Bytes, and Words]]></title>
  <link href="http://blog.zimmerman.io/categories/unix/atom.xml" rel="self"/>
  <link href="http://blog.zimmerman.io/"/>
  <updated>2014-10-05T13:58:08-04:00</updated>
  <id>http://blog.zimmerman.io/</id>
  <author>
    <name><![CDATA[Jake Zimmerman]]></name>
    <email><![CDATA[jake@zimmerman.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Running a VPS: Log 1]]></title>
    <link href="http://blog.zimmerman.io/2014/06/19/running-a-vps-log-1/"/>
    <updated>2014-06-19T23:10:51-04:00</updated>
    <id>http://blog.zimmerman.io/2014/06/19/running-a-vps-log-1</id>
    <content type="html"><![CDATA[<h1>Managing Dotfiles Across Machines</h1>

<p>You could say I&rsquo;m a bit of a geek when it comes to configuring my terminal environment; this obsession has led me to concoct ever-elaborate setup scripts and configuration files. On top of this, between my laptop&rsquo;s multiple boot environments, the servers I use for school, work, and ScottyLabs, and now <a href="/2014/06/19/running-a-vps-log-0">metagross</a>, keeping my configuration files in sync is a must. I handle it swiftly using a combination of git and rcm.</p>

<!-- more -->


<h2>My Scripts</h2>

<p>I&rsquo;ve put a decent amount of time into my dotfiles. I like to think they&rsquo;re pretty good. That being said, I&rsquo;m not about to go over every piece of them, because that would bore even me. I might come back to these pieces in a series on getting started with the terminal (aimed at incoming CS freshmen and other up-and-coming hackers), but for now, a link will suffice.</p>

<h4><a href="https://github.com/Z1MM32M4N/dotfiles/">Z1MM32M4N/dotfiles</a></h4>

<h2>rcm + git</h2>

<p>rcm, short for rc file (as in .bash<b>rc</b>, .vim<b>rc</b>) management, is a tool that manages symlinks between dotfiles in one directory and your home directory. This is cool because, once all your config files contained in one folder, they can be tracked with git for version control without having to put your entire <code>$HOME</code> directory inside a git repo.</p>

<p>On a single machine, rcm works like this. You have one directory (usually <code>~/.dotfiles</code>, but configurable to any directory) which stores all the config files. In here, all files which are meant to be tracked and symlinked do <em>not</em> include the prefixed &lsquo;<code>.</code>&rsquo;; instead, it is added as part of the linking process. After installation, which is easily handled through the brew formula, the .deb, or the Makefile, there are a couple of new tools available.</p>

<p>The first worth mentioning is <code>man 7 rcm</code>, which documents what was just installed. Taking a glance at this page, we see that rcm is actually a suite of tools: <code>lsrc</code>, <code>mkrc</code>, <code>rcdn</code>, and <code>rcup</code>. While all these tools are useful, the most important is <code>rcup</code>. After collecting all your dotfiles into <code>~/.dotfiles</code>, simply executing <code>rcup</code> symlinks all the necessary files to their appropriate locations.</p>

<p>From here, you get all the benefits of git, like pushing to GitHub, collaborating with others, lightweight branching, and syncing files easily even when your workflow is distributed across many servers.</p>

<h2>Caveats</h2>

<p>To be fair, I don&rsquo;t use <code>rcm</code> in the way I think it&rsquo;s creators imagined it would be used. Specifically, the software includes certain provisions to designate which files should affect various machines using a tag system. While it could possibly work, in my mind it&rsquo;s much more tedious than what I&rsquo;ve come up with.</p>

<p>Succinctly, the issue is this: when cloning a repo and running <code>rcup</code> for the first time, you can&rsquo;t easily say &ldquo;this is my VPS, it&rsquo;s running Debian GNU/Linux, has these system binaries installed, and therefore should start up using these methods and scripts&rdquo;. For this, we&rsquo;re on our own.</p>

<h2>Installation</h2>

<p>The solution I came up with regarding a multiple-environment workflow deals with handling all the necessary machine-dependent configuration within my dotfiles <em>themselves</em>. That way I can minimize code reuse and have everything in one convenient file. As a result, <a href="https://github.com/Z1MM32M4N/dotfiles/tree/master/bash_profile">my bash_profile</a> is a bit lengthy at about 300 lines, and it has three large case statements, but I make all this up through deployment. Deployment is <strong>incredibly</strong> swift. Again, You can take a look at the file to see how it works, but when I had finished <a href="/2014/06/19/running-a-vps-log-1">locking down my server</a>, these are the only configuration commands I had to run:</p>

<p><figure class='code'><figcaption><span>Installing rcm and dotfiles </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;install rcm using deb and dpkg&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>wget &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://thoughtbot.github.io/rcm/debs/rcm_1.2.3-1_all.deb&quot;</span>&gt;https://thoughtbot.github.io/rcm/debs/rcm_1.2.3-1_all.deb&lt;/a&gt;
</span><span class='line'><span class="nv">$ </span>sudo dpkg -i rcm_1.2.3-1_all.deb&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;clone dotfiles down, into the ~/.dotfiles directory&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>git clone &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/Z1MM32M4N/dotfiles&quot;</span>&gt;https://github.com/Z1MM32M4N/dotfiles&lt;/a&gt; ~/.dotfiles&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;make the symlinks&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>rcup
</span></code></pre></td></tr></table></div></figure></p>

<p>Voilà! After that, I had my sick bash prompt, my <a href="/2014/06/11/update-your-software-its-the-law/">snazzy update function</a>, my delightful vim colorscheme, solarized dir colors&ndash;the list goes on and on.</p>

<p>Sure, it&rsquo;s taken a bit of effort to get the point where I can run these commands and have it Just Work, but doing that work once means that from now on, whenever I sit down at a new work computer, a new VPS, a new laptop, or some other workstation, I&rsquo;m only a few commands away from my favorite settings.</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on [Twitter][t], checking out my tinkerings on [GitHub][g], or paying a visit to [my homepage][h]. I&#8217;d love to hear what you think about what I&#8217;ve managed to put together, so feel free to comment, tweet at me, or send me an email.
 [t]: http://www.twitter.com/Z1MM32M4N/
 [g]: http://www.github.com/Z1MM32M4N/
 [h]: http://www.zimmerman.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Summer Project Series]]></title>
    <link href="http://blog.zimmerman.io/2014/06/19/summer-project-series/"/>
    <updated>2014-06-19T20:16:18-04:00</updated>
    <id>http://blog.zimmerman.io/2014/06/19/summer-project-series</id>
    <content type="html"><![CDATA[<p>After spending most of the beginning of the summer flying, driving, moving, moving again, riding trains, riding different trains, and starting a new job, it&rsquo;s finally time to start working on some cool side projects.</p>

<!-- more -->


<h1>Projects</h1>

<p>This page will just serve as a list of links to various posts grouped by project. Hopefully you can find something that interests you!</p>

<h2>Running a VPS</h2>

<p>Inspired in part by the <a href="http://www.club.cc.cmu.edu/talks/vps.html">Computer Club talk</a> and in part by my inability to do anything quickly on a raspberry pi, I recently decided to rent out a VPS from DigitalOcean. Read on for notes and ramblings about what I&rsquo;m using it for.</p>

<ul>
<li><a href="/2014/06/19/running-a-vps-log-0/">Running a VPS: Log 0 - Initial Setup</a></li>
<li><a href="/2014/06/19/running-a-vps-log-1/">Running a VPS: Log 1 - Managing Dotfiles Across Machines</a></li>
<li><a href="/2014/06/24/running-a-vps-log-2/">Running a VPS: Log 2 - Seriously: Back It Up</a></li>
<li><a href="/2014/07/04/running-a-vps-log-3/">Running a VPS: Log 3 - A Mail Server that Works… Kind of.</a></li>
<li><a href="/2014/07/07/running-a-vps-log-4/">Running a VPS: Log 4 - Debugging a Broken Mail Server</a></li>
<li><a href="/2014/07/07/running-a-vps-log-5/">Running a VPS: Log 5 - It&rsquo;s not you, it&rsquo;s me</a></li>
</ul>


<h2>JavaScript Adventures</h2>

<p>Over at ScottyLabs, we&rsquo;re planning some super awesome talks and labs to teach web development during the upcoming semester, so I&rsquo;ve been hard at work compiling and writing some awesome JavaScript demos, resources, and projects.</p>

<ul>
<li><a href="/2014/06/16/why-everyone-loves-javascript/">Why Everyone Loves JavaScript</a></li>
</ul>


<p>Edit: Web Dev Weeks was a hit! If you had the chance to come to one of the talks, great! We&rsquo;ll be holding similar events later in the year, too. If you didn&rsquo;t make it, here&rsquo;s what you missed:</p>

<ul>
<li><a href="//scottylabs.org/webdevweeks/">Web Dev Weeks homepage</a></li>
<li><a href="//scottylabs.org/webdevweeks/frontend/">My Frontend Development (JavaScript) workshop</a></li>
</ul>


<hr />

<h2>Print@ScottyLabs</h2>

<p>Okay, so I haven&rsquo;t actually started this one yet, but I will be soon! I&rsquo;ll be rewriting the service from just about the ground up, adding tons of cool features along the way.</p>

<p>In the mean time, if mail servers, Python 3, and Django are your thing, you may want to check out the following links that I&rsquo;ve come across while doing a bit of research.</p>

<ul>
<li><strong> <a href="https://docs.python.org/3/whatsnew/3.4.html#whatsnew-email-contentmanager">Python 3.4.1 and MIME Multipart Messages</a> </strong></li>
<li><strong> <a href="https://docs.djangoproject.com/en/dev/releases/1.7/">Django 1.7 to include built-in schema migrations</a> </strong></li>
</ul>


<p>Edit: I&rsquo;ve started Print 2.0, and it&rsquo;s moving slowly now that classes have started to pick up. I have done a bit of work on it though, and I&rsquo;ll be documenting it soon. Since it&rsquo;s no longer the summer, though, it won&rsquo;t be published under the Summer Project Series tag.</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on [Twitter][t], checking out my tinkerings on [GitHub][g], or paying a visit to [my homepage][h]. I&#8217;d love to hear what you think about what I&#8217;ve managed to put together, so feel free to comment, tweet at me, or send me an email.
 [t]: http://www.twitter.com/Z1MM32M4N/
 [g]: http://www.github.com/Z1MM32M4N/
 [h]: http://www.zimmerman.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update Your Software: It's the Law]]></title>
    <link href="http://blog.zimmerman.io/2014/06/11/update-your-software-its-the-law/"/>
    <updated>2014-06-11T22:22:57-04:00</updated>
    <id>http://blog.zimmerman.io/2014/06/11/update-your-software-its-the-law</id>
    <content type="html"><![CDATA[<p>Okay, so maybe the government won&rsquo;t come after you for not updating. But they should. To guard off any present or future threats (be they from governments, security vulnerabilities, or something else in the cyber realm), I wrote a short bash snippet to check my system for outdated packages.</p>

<!-- more -->


<h2>Obligatory Existential/Meta Section</h2>

<p>I don&rsquo;t quite know what prompted me to suddenly become interested in maintaining an up to date system. Maybe it was <a href="https://www.facebook.com/groups/cmuscs/permalink/727878180603546/">this post</a> of Arch Linux horror stories. Maybe it was the release of <a href="https://git.kernel.org/cgit/git/git.git/tree/Documentation/RelNotes/2.0.0.txt">git 2.0</a>, which introduces a lot of cool new features and deprecates a lot of others. Who knows, maybe it was influenced by Heartbleed and the <a href="https://www.openssl.org/news/secadv_20140605.txt">host</a> <a href="http://grahamcluley.com/2014/06/feedly-blackmail-ddos/">of other</a> <a href="http://blog.evernote.com/blog/2013/03/02/security-notice-service-wide-password-reset/">high-profile</a> security vulnerabilities and hacks that have sprung up lately. It&rsquo;s probably a combination of all of these. Let&rsquo;s move on.</p>

<p>For the impatient among us, here&rsquo;s the code, which is also available <a href="https://github.com/Z1MM32M4N/dotfiles/blob/master/bash_profile#L16-L42">here</a> and <a href="https://github.com/Z1MM32M4N/dotfiles/blob/master/bash_profile#L153-L178">here</a> amongst all the code for <a href="https://github.com/Z1MM32M4N/dotfiles">all my dotfiles</a>.</p>

<p><figure class='code'><figcaption><span>Alert to Update <a href="https://github.com/Z1MM32M4N/dotfiles/blob/master/bash_profile#L16-L42">https://github.com/Z1MM32M4N/dotfiles/blob/master/bash_profile#L16-L42</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="p">&amp;</span>mdash<span class="p">;&amp;</span>ndash<span class="p">;</span> daily updates <span class="p">&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>ndash<span class="p">;</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span> ! -e <span class="nv">$HOME</span>/.last_update <span class="o">]</span> <span class="p">&amp;</span>amp<span class="p">;&amp;</span>amp<span class="p">;</span> touch <span class="nv">$HOME</span>/.last_update&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Initialize <span class="k">for</span> when we have no GNU date available&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;last_check<span class="o">=</span>0
</span><span class='line'><span class="nv">time_now</span><span class="o">=</span>0&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Unix last <span class="nb">command </span>to check the log of logins, grab the most recent&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;last_check_string<span class="o">=</span>&lt;code&gt;ls -l <span class="nv">$HOME</span>/.last_update <span class="p">|</span> awk <span class="s1">&#39;{print $6&quot; &quot;$7&quot; &quot;$8}&#39;</span>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Darwin uses BSD, check <span class="k">for</span> gdate, <span class="k">else</span> use date&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="o">[[</span> &lt;code&gt;uname&lt;/code&gt; <span class="o">=</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>Darwin<span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="p">&amp;</span>amp<span class="p">;&amp;</span>amp<span class="p">;</span> -n &lt;code&gt;which gdate&lt;/code&gt; <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nv">last_login</span><span class="o">=</span>&lt;code&gt;gdate -d<span class="s2">&quot;$last_check_string&quot;</span> +%s&lt;/code&gt;
</span><span class='line'>  <span class="nv">time_now</span><span class="o">=</span>&lt;code&gt;gdate +%s&lt;/code&gt;
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="c"># Ensure this is GNU grep</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> -n <span class="p">&amp;</span>ldquo<span class="p">;</span>&lt;code&gt;date --version 2<span class="p">&amp;</span>gt<span class="p">;</span> /dev/null <span class="p">|</span> grep GNU&lt;/code&gt;<span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nv">last_login</span><span class="o">=</span>&lt;code&gt;date -d<span class="s2">&quot;$last_login_string&quot;</span> +%s&lt;/code&gt;
</span><span class='line'>    <span class="nv">time_now</span><span class="o">=</span>&lt;code&gt;date +%s&lt;/code&gt;
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="k">fi</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;time_since_check<span class="o">=</span><span class="k">$((</span>time_now <span class="o">-</span> last_login<span class="k">))</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="o">[</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$time_since_check</span><span class="p">&amp;</span>rdquo<span class="p">;</span> -ge <span class="m">86400</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$cred</span><span class="o">==</span>&gt;<span class="nv">$cwhiteb</span> Your system is out of date!<span class="nv">$cnone</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="p">&amp;</span>lsquo<span class="p">;</span>Run &lt;code&gt;update&lt;/code&gt; to bring it up to date.<span class="p">&amp;</span>rsquo<span class="p">;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>Check for Updates <a href="https://github.com/Z1MM32M4N/dotfiles/blob/master/bash_profile#L153-L178">https://github.com/Z1MM32M4N/dotfiles/blob/master/bash_profile#L153-L178</a> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="p">&amp;</span>mdash<span class="p">;&amp;</span>ndash<span class="p">;</span> <span class="k">function</span> <span class="p">&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;&amp;</span>mdash<span class="p">;</span>-&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;update<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  touch <span class="nv">$HOME</span>/.last_update&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  <span class="c"># Mac updates</span>
</span><span class='line'>  <span class="k">case</span> <span class="nv">$HOSTNAME</span> in
</span><span class='line'>    &lt;em&gt;Jacobs-MacBook-Air&lt;/em&gt;<span class="o">)</span>
</span><span class='line'>      <span class="nb">echo</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$cblueb</span><span class="o">==</span>&gt;<span class="nv">$cwhiteb</span> Updating Homebrew<span class="p">&amp;</span>hellip<span class="p">;</span><span class="nv">$cnone</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>      brew update&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;  <span class="nb">echo</span> <span class="s2">&quot;$cblueb==&amp;gt;$cwhiteb Checking for outdated brew packages...$cnone&quot;</span>
</span><span class='line'>  brew outdated --verbose
</span><span class='line'>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;$cblueb==&amp;gt;$cwhiteb Checking for outdated rbenv...$cnone&quot;</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="nv">$HOME</span>/.rbenv
</span><span class='line'>  git fetch
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;`git describe --tags master`&quot;</span> !<span class="o">=</span> <span class="s2">&quot;`git describe --tags origin/master`&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;rbenv (`git describe --tags master`) is outdated (`git describe --tags origin/master`).&quot;</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;To update, run: cd ~/.rbenv; git merge origin master &amp;amp;&amp;amp; cd -&quot;</span>
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'>  <span class="nb">cd</span> - 2<span class="p">&amp;</span>gt<span class="p">;&amp;</span>amp<span class="p">;</span><span class="m">1</span> <span class="p">&amp;</span>gt<span class="p">;</span> /dev/null
</span><span class='line'>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;$cblueb==&amp;gt;$cwhiteb Checking for outdated ruby gems...$cnone&quot;</span>
</span><span class='line'>  gem outdated
</span><span class='line'>  <span class="p">;;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  <span class="k">esac</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>You&rsquo;ll note the use of a touch file (created in line 2 of the first snippet if it doesn&rsquo;t already exist). If this file is 24 hours old, each time this code is run an alert will be printed. Since this code is running inside of my <code>.bash_profile</code>, that means that every time I open a terminal on a 24-hour-old system, I see the update message.</p>

<p>Next, you&rsquo;ll note that I&rsquo;ve defined a function called <code>update</code> which is actually misnamed. This function merely checks for available updates instead of actually performing the updates, logging those packages, gems, and formulae it finds that are out of date. For my purposes, I only need to update brew, check for formulae updates, update rbenv, and check for gem updates. Obviously though, given that there is a way to programmatically check something for updates, plugging that code in here would check it as well. This means that this method is very easy to customize and extend for various needs.</p>

<h2>Rant</h2>

<p>I was planning on checking pip for updates as well, but pip is kind of not even good. To give you an idea, to check all the packages brew manages for updates, you type <code>brew outdated</code>, and it will list the formula name, current version number, and newest version number. Meanwhile, back in the land of pip, no such functionality exists (at least, simple functionality, and functionality that I could find. If you&rsquo;d like to correct me, be my guest!). I&rsquo;m sure that this script will grow as I come to manage more and more pieces of software on my system and others.</p>

<p>If you have any questions about what I&rsquo;ve done here, or you catch some bugs, be sure to comment below or file an issue on GitHub! I&rsquo;d love to hear what you have to say.</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on [Twitter][t], checking out my tinkerings on [GitHub][g], or paying a visit to [my homepage][h]. I&#8217;d love to hear what you think about what I&#8217;ve managed to put together, so feel free to comment, tweet at me, or send me an email.
 [t]: http://www.twitter.com/Z1MM32M4N/
 [g]: http://www.github.com/Z1MM32M4N/
 [h]: http://www.zimmerman.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Molokai: An iTerm2 Color Scheme]]></title>
    <link href="http://blog.zimmerman.io/2014/06/07/molokai-an-iterm2-color-scheme/"/>
    <updated>2014-06-07T12:00:39-04:00</updated>
    <id>http://blog.zimmerman.io/2014/06/07/molokai-an-iterm2-color-scheme</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve used <a href="https://github.com/tomasr">tomasr</a>&rsquo;s vim color scheme <a href="https://github.com/tomasr/molokai">molokai</a> for a long time now. Recently I decided that the default iTerm2 colors were a little lack luster, so I ported over the main colors from this theme into an iTerm2 theme.</p>

<!-- more -->


<h2><a href="https://github.com/mbadolato/iTerm2-Color-Schemes#molokai"><i class="fa fa-angle-double-right"></i> Installation</a></h2>

<p>If you don&rsquo;t already have your iTerm2 colors configured or you&rsquo;re looking for a change, you should definitely check out <a href="https://github.com/mbadolato/iTerm2-Color-Schemes">iTerm2-Color-Schemes</a>, a GitHub repo by <a href="https://github.com/mbadolato">mbadolato</a> filled with tons of themes he&rsquo;s ported, collected, and been given.</p>

<p>You can see and install the <a href="https://github.com/mbadolato/iTerm2-Color-Schemes#molokai">Molokai theme</a> there.</p>

<h2>Screenshots</h2>

<p>I don&rsquo;t have too many good screenshots of this theme that aren&rsquo;t vim because I&rsquo;m actually using <a href="https://github.com/seebi/dircolors-solarized">solarized</a> dircolors for colorizing the output of my <code>ls</code> and related commands. However, there are still plenty of tools I use which resort to default ANSI colors to colorize their output, like <code>git</code> and <code>brew</code>. You can see a <code>git log</code> command along side a table of all ANSI color combinations resulting from this theme (this table can be a bit overwhelming: it&rsquo;s best to just look at the first two columns to get an idea of what the colors really look like).</p>

<p><a class="image-link" href="/images/molokai.png"><img src="/images/molokai.png"></a></p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on [Twitter][t], checking out my tinkerings on [GitHub][g], or paying a visit to [my homepage][h]. I&#8217;d love to hear what you think about what I&#8217;ve managed to put together, so feel free to comment, tweet at me, or send me an email.
 [t]: http://www.twitter.com/Z1MM32M4N/
 [g]: http://www.github.com/Z1MM32M4N/
 [h]: http://www.zimmerman.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding a Network Printer to a Linux Server]]></title>
    <link href="http://blog.zimmerman.io/2014/05/06/adding-a-network-printer-to-a-linux-server/"/>
    <updated>2014-05-06T02:09:29-04:00</updated>
    <id>http://blog.zimmerman.io/2014/05/06/adding-a-network-printer-to-a-linux-server</id>
    <content type="html"><![CDATA[<p>It&rsquo;s one thing to plug in a CD, click through a few dialogs, and wait for the computer to chime at you saying that your printer has been installed. Unfortunately, this is not how server administration works. Here&rsquo;s my account of installing multiple network-attached printers on a Debian server.</p>

<!-- more -->


<p></p>

<h2>TL;DR</h2>

<p>For those who only care about the solution: <a href="#tldr">TL;DR</a>.</p>

<h2>The Hard Way</h2>

<p>As I mentioned in my last post, I&rsquo;m a part of a student organization called <a href="//www.scottylabs.org">ScottyLabs</a>. We do tons of cool things, but the project which I&rsquo;m currently working on is <a href="//print.scottylabs.org">Print@ScottyLabs</a>. It&rsquo;s a really handy service which lets you send an attachment to <a href="&#x6d;&#97;&#105;&#x6c;&#116;&#x6f;&#x3a;&#112;&#x72;&#105;&#x6e;&#x74;&#64;&#x73;&#99;&#x6f;&#116;&#x74;&#121;&#x6c;&#97;&#x62;&#115;&#46;&#111;&#114;&#x67;">&#112;&#x72;&#x69;&#110;&#x74;&#64;&#x73;&#99;&#111;&#116;&#x74;&#121;&#108;&#x61;&#x62;&#x73;&#x2e;&#111;&#x72;&#103;</a> and have it sent to the printer. I&rsquo;m currently in the process of rewriting much of the code base from scratch to support a plethora of highly-requested features, so there will no doubt be more posts about my exploits.</p>

<p>Luckily, CMU (and arguably every college) is not terribly notable for keeping up-to-date information on it&rsquo;s website. This means that I got the &ldquo;wonderful&rdquo; opportunity to dig through CUPS documentation, sketchy printer manufacturer websites, and the depths of the Internet to finagle together a solution. Here&rsquo;s to hoping that you have a far more pleasurable experience. Without further ado, these are the steps I went through to get it done.</p>

<h2>What Didn&rsquo;t Work</h2>

<p>The Common Unix Printing System (CUPS) is a relatively new standard which is designed to improve over the rather haphazard methods used for printing in the past. It improves in a lot of ways and has a few neat features. One of these is a handy web interface which lets you interact with your configuration files, add printers, view the print queue, etc. through a beginner-friendly GUI, which described me perfectly when I started and still does now.</p>

<p>By default, when <code>cupsd</code> (the CUPS daemon) starts up, it listens on <code>http://localhost:631</code> incoming HTTP requests. By default, external requests are refused. You can either enable these in a configuration file somewhere or <a href="http://ubuntuguide.org/wiki/Using_SSH_to_Port_Forward">tunnel your traffic</a> through an <code>ssh</code> proxy, &ldquo;tricking&rdquo; the server into thinking your requests are coming locally. Additionally, you must be either <code>root</code> or in the <code>lpadmin</code> group to access the administration parts of this web GUI.</p>

<p>But for whatever reason, neither using the <code>root</code> username and password nor adding myself to the <code>lpadmin</code> group worked. I was incessantly blocked by the interface when I tried to give it my credentials. Defeated, I needed to find another way.</p>

<p>I’m telling you this as a sort of justification for the super hacky solution that I came up with (but that works in the end, even if it’s non-standard). If you have any ideas on why this failed, I&rsquo;d love to hear them!</p>

<h2>When in doubt, duct tape</h2>

<p>The instructions to install CMU print drivers on Linux only work for environments with desktop environments installed. (You can read these instructions <a href="http://www.cmu.edu/computing/clusters/printing/how-to/linux/pers-cluster.html">here</a>). So, in keeping with the UNIX philosophy that everything’s a file, the solution I came up with was essentially to follow these instructions on a <strong>personal Linux box</strong>, then <strong>copy and modify</strong> the corresponding files to achieve the same effect on the server we need them to be on.</p>

<p>It’s at this point that you’re probably wondering why I didn’t just do a little research and figure out how to make these modifications myself, or perhaps figure out where the files I needed were coming from. There are a couple of reasons. First, that takes a lot of time, I&rsquo;m lazy, and whatever I came up with didn&rsquo;t need to scale. Second, when you install a CUPS printer, you need a PostScript Printer Description (PPD) file to tell CUPS how the printer works. Despite my best efforts searching the web, I couldn’t find a central repository where these .ppd files were stored. However, most desktop environments have the ability to search <strong>somewhere mystical</strong> (read: you should tell me if you know) and download these .ppd files.</p>

<p><a name="tldr"></a></p>

<h2>Do you think I really care, just tell me how it works</h2>

<p>The process is not too complicated. Go back to the <a href="http://www.cmu.edu/computing/clusters/printing/how-to/linux/pers-cluster.html">CMU instructions</a> to install a printer on a personal Linux machine. Following them should be fairly self explanatory. Say perhaps that you want to install the print drivers for the queue <code>andrew-color</code>. After following along and inserting “andrew-color” as the print queue where required, you’ll come up to a screen that asks you to name your printer. This name does not have to be the name of the queue, but I always make it that when I&rsquo;m working with the CMU printers. Either way, be sure to remember what you entered for this name (again, I’m using the name “andrew-color”).</p>

<p>Also, part of the process should involve you specifying a PPD file. The easiest way to do this is to go to a printer that dispatches jobs from that queue and to get the make and model for it. In the case of andrew-color, the Wean printer is an HP Color LaserJet CP6015x. Using this information, we can use the Gnome/KDE/XFCE window, enter our make and model, and have it spit out the recommended PPD file to use (although it likely won&rsquo;t call as such).</p>

<p>Now that everything is all installed, we can pluck the information we need. If you’re on a standard Linux install, your CUPS files will be in <code>/etc/cups</code>. The specific files that are of interest to us are <code>/etc/cups/printers.conf</code> and <code>/etc/cups/ppd/&lt;your-printer-name&gt;.ppd</code>, so my file is called <code>/etc/cups/ppd/andrew-color.ppd</code>. We need the entire .ppd file, and it will go into the corresponding directory on our server. As for <code>printers.conf</code>, we just need a specific entry. This file is a list of all the installed printers, each wrapped in <code>&lt;Printer your-printer-name&gt;&lt;/Printer&gt;</code> tags. Yank this text however you want from your local computer to the server, and add it to the corresponding <code>printers.conf</code> file. If your personal Linux machine made the <code>&lt;Printer&gt;&lt;/Printer&gt;</code> tags into <code>&lt;DefaultPrinter x&gt;&lt;/DefaultPrinter&gt;</code> tags, go ahead and change this to just <code>&lt;Printer x&gt;&lt;/Printer&gt;</code>. To recap, now I’ve got about 20 lines of additional configuration data added to the <code>printers.conf</code> file on my server, beginning with the line <code>&lt;Printer andrew-color&gt;</code> and ends with the line <code>&lt;/Printer&gt;</code>.</p>

<p>For my installation, I have one more thing to do. Somewhere in the middle of this entry, there is a line which reads something like <code>Filter application/vnd.cups-postscript 0 hpps</code>. CUPS has a filtering functionality that lets you interact with the data before it gets printed, which you can read more about <a href="http://en.wikipedia.org/wiki/CUPS#Filtering_process">here</a>. We want to make sure that we use the <code>foomatic</code> filters (because that&rsquo;s how our server is configured), so we have to change the existing filters so that they read
~~~
Filter application/vnd.cups-raw 0 -
Filter application/vnd.cups-postscript 100 foomatic-rip
Filter application/vnd.cups-pdf 0 foomatic-rip
~~~
After all this, if you’ve copied the PPD file into the right folder (<code>/etc/cups/ppd/</code>), then you’re all set! Restart CUPS with <code>sudo /etc/init.d/cups restart</code> so that your changes take effect. You can print using <code>lp</code> and the <code>-d</code> flag to specify the print queue you want. Remember that we picked the name “andrew-color” for our print queue above, so a sample <code>lp</code> command would look like this:</p>

<p><code>lp -t ‘My First Color Print Job’ -U jezimmer -d andrew-color /path/to/myfile.pdf</code></p>

<p>Happy printing!</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on [Twitter][t], checking out my tinkerings on [GitHub][g], or paying a visit to [my homepage][h]. I&#8217;d love to hear what you think about what I&#8217;ve managed to put together, so feel free to comment, tweet at me, or send me an email.
 [t]: http://www.twitter.com/Z1MM32M4N/
 [g]: http://www.github.com/Z1MM32M4N/
 [h]: http://www.zimmerman.io/
</p>
]]></content>
  </entry>
  
</feed>
