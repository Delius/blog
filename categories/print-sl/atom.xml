<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Print-sl | Bits, Bytes, and Words]]></title>
  <link href="http://blog.zimmerman.io/categories/print-sl/atom.xml" rel="self"/>
  <link href="http://blog.zimmerman.io/"/>
  <updated>2014-12-21T02:06:45-06:00</updated>
  <id>http://blog.zimmerman.io/</id>
  <author>
    <name><![CDATA[Jake Zimmerman]]></name>
    <email><![CDATA[jake@zimmerman.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Google OAuth2 for CMU Authentication]]></title>
    <link href="http://blog.zimmerman.io/2014/10/20/using-google-apps-for-cmu-authentication/"/>
    <updated>2014-10-20T05:11:37-05:00</updated>
    <id>http://blog.zimmerman.io/2014/10/20/using-google-apps-for-cmu-authentication</id>
    <content type="html"><![CDATA[<p>Using <code>python-social-auth</code> and Django, I&rsquo;ve found a very straightfoward way of adding authentication to apps designed for CMU students. Given that all Andrew accounts are now Google Apps @ CMU accounts, we can take advantage of the widely used Google OAuth2 libraries to authenticate users, but just restrict sign-ins to the <code>andrew.cmu.edu</code> &ldquo;hosted domain.&rdquo;</p>

<!-- more -->


<h2>Background</h2>

<p>Finally! I&rsquo;ve alluded many times to blogging about some of the things I&rsquo;m learning from my experiences rewriting <a href="http://print.scottylabs.org/">Print@ScottyLabs</a>. After a summer of putting it off and half a semester more of dawdling, I&rsquo;ve finally managed to lay some solid groundwork.</p>

<p>One of the features that we plan on adding to Print 2.0 is a web interface. For people familiar with the way Print works currently, you interact with the service entirely through email. This leads to a clunky user experience and a lot of weird bugs and edge cases. With a web interface, we hope to streamline the process of account management and printing documents.</p>

<p>With this in mind, we needed to decide on a user model. Ideally, we&rsquo;d like this model to give us two things:</p>

<ul>
<li><strong>It should be secure.</strong> People who don&rsquo;t already have access to CMU printers shoudn&rsquo;t be able to easy gain access by using our system.</li>
<li><strong>It should be familiar.</strong> We want to design Print 2.0 to be as close to an official-feeling CMU app as we can without stepping on the ever-present administrative toes.</li>
</ul>


<p>Naturally, this leads to an obvious solution: have people sign in using the same <a href="https://login.cmu.edu">https://login.cmu.edu</a> site, which is used for email, Blackboard, AutoLab, and many other on-campus services. The trick, then, is to figure out how to do this.</p>

<p>My first thought was to &ldquo;use Shibboleth.&rdquo; I put this in quotes because I didn&rsquo;t exactly know what that meant at the time. What I was looking for was a simple OAuth2 API (like what Google or Facebook provide) that I could much just drop into my app with no other configuration required on the deployment machine. Shibboleth does not offer this solution.</p>

<p>Luckily, Google&rsquo;s OAuth2 API has a feature that allowed me to do exactly what I wanted. Thanks to a couple of resourceful members of the CMU Computer Science Facebook group (Carlos Diaz-Padron and Arthur Lee), I found out about a barely-documented parameter that you can pass in on the auth URL to restrict Google OAuth2 logins to a <a href="https://developers.google.com/accounts/docs/OAuth2Login#hd-param">specific hosted domain</a>. Since all CMU Andrew accounts are Google Apps accounts (as of Fall 2013), we can ask Google to restrict logins to the <code>'andrew.cmu.edu'</code> hosted domain. From here on, the only trick is to get whatever client library you&rsquo;re using to handle authentication to pass this parameter with a value of <code>'andrew.cmu.edu'</code> along to Google. The rest of this post describes a bare-bones way of doing this using Django.</p>

<h2>Implementing Authentication</h2>

<p>The following is a pretty long-winded explanation of my personal struggles with this. If you&rsquo;d really just like to learn by example and by making your own mistakes, check out the <a href="https://github.com/Z1MM32M4N/google-apps-cmu-login/">code on GitHub</a>. I also found the <a href="https://github.com/omab/python-social-auth/tree/master/examples/"><code>python-social-auth</code> examples</a> very helpful. In the spirit of <a href="http://www.gitorial.com/">gitorial</a>, the commits are structured logically to give you a sense of how the app came together as I wrote it. In fact, I&rsquo;ve even <a href="http://www.gitorial.com/#/Z1MM32M4N/25536683">made a gitorial</a> for this repo!</p>

<h3>Python Social Auth</h3>

<p>First up: pick a client library. I&rsquo;ve had success using <code>python-social-auth</code> in other projects, and it&rsquo;s generally a mature project, so it&rsquo;s what I picked.</p>

<p>Next up: skim the docs. Given the enormous size of this project (it has solutions for tons of python frameworks and tons of authentication backends), the docs are pretty comprehensive. Unfortunately, they fell short in the one place where I needed to look.</p>

<p>One of the neat things about the python social auth library is that it can be easily extended to support additional authentications backends using simple object-oriented techniques. To make this happen, very few pieces of information are hardcoded; in particular, the names of the variables that allow for configuration are dynamically generated based on the available backends.</p>

<p><a href="https://python-social-auth.readthedocs.org/en/latest/configuration/settings.html#extra-arguments-on0auth-processes">This page</a> outlines how to pass in extra, optional arguments while constructing the redirect URI for a particular authentication backend. It hints at the names of the variables that need to be defined, but sadly these hints are wrong.</p>

<p><strong>This is a correction to the documentation provided at the above link.</strong> Extra authentication arguments can be passed in using any of the following variables:</p>

<ul>
<li><code>SOCIAL_AUTH_&lt;backend&gt;_AUTH_EXTRA_ARGUMENTS</code></li>
<li><code>SOCIAL_AUTH_AUTH_EXTRA_ARGUMENTS</code> (no, this is not a typo)</li>
<li><code>AUTH_EXTRA_ARGUMENTS</code></li>
</ul>


<p>I&rsquo;m not sure what the difference between using the second and third variables are, but all variables of the first form will allow you to scope the extra arguments to a particular backend (in case you&rsquo;re using more than one in the same app).</p>

<p>So in my case, I added the following line to my <code>settings.py</code>:</p>

<pre><code class="python settings.py https://github.com/Z1MM32M4N/google-apps-cmu-login/blob/master/config/settings.py#L66">SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS = {'hd' : 'andrew.cmu.edu'}
</code></pre>

<p>Phew. That&rsquo;s a long variable name. But Jake, how did you come up with <code>GOOGLE_OAUTH2</code> for the backend name? There&rsquo;s really no good answer to this, because I haven&rsquo;t been able to find a web-readable list of all the names in one place. The way this name is generated is by taking the <code>name</code> property of the particular backend you&rsquo;re using (in my case, <code>social.backends.google.GoogleOAuth2</code> has <code>name = 'google-oauth2'</code>, which I found by looking at the source), replacing all hyphens with underscores and making everything capital.</p>

<h3>The Django App</h3>

<p>Now you should plenty of background knowledge to make sense of the Django app on your own, but I&rsquo;ll reiterate the main points here for completeness. It will be pretty choppy in most places if you&rsquo;re not referring to my example app on GitHub as you read.</p>

<p>First, we&rsquo;ll get all our URLs in place. For Django, all the URLs dealing with logging in are already defined; we just have to include them:</p>

<pre><code class="python config/urls.py https://github.com/Z1MM32M4N/google-apps-cmu-login/blob/master/config/urls.py#L10">    ...
    url(r'', include('social.apps.django_app.urls', namespace='social')),
    ...
</code></pre>

<p>Then we can set up some simple URLs (a home page and a logout view), and accompanying views for these URLs that do exactly what you think they should.</p>

<p>In our template, if the user is logged in, we&rsquo;ll show their AndrewID (<code>user.username</code>), or else we&rsquo;ll hardcode the link to the Google OAuth2 authentication backend.</p>

<p><strong>Note</strong>: if you plan on using multiple forms of authentication (like Facebook or GitHub) in this app, be sure to check out the python social auth example for how they generate their home page such that no URLs need to be hard coded. For our purposes, though, if there&rsquo;s only one URL it will be fine to just write it out.</p>

<h3>Demo</h3>

<iframe width="420" height="315" src="//www.youtube.com/embed/GYRUvTvTSJE" frameborder="0" allowfullscreen></iframe>


<h3>Going Forward</h3>

<p>That&rsquo;s basically it. The rest is up to you to fill in. Building off this model, you should be able to make basically any Django app that you&rsquo;d otherwise want to build.</p>

<p>One thing you&rsquo;ll want to look into is defining a custom Auth User model. Custom Auth User models allow you to plug into Django&rsquo;s default auth system to take advantage of all the features it has available for keeping track of your users. The <a href="https://docs.djangoproject.com/en/dev/topics/auth/customizing/">Django docs</a> on this topic are actually pretty good, though you&rsquo;ll likely want to find an example to help you work through the specifics.</p>

<p>As always, let me know if you have any questions or if by following these steps something didn&rsquo;t work for you. Because of how bare bones this app is, it&rsquo;s likely that I glossed over some points for the sake of minimalism. Comment below with your feedback and feel free to email me or make GitHub issues with your questions.</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on [Twitter][t], checking out my tinkerings on [GitHub][g], or paying a visit to [my homepage][h]. I&#8217;d love to hear what you think about what I&#8217;ve managed to put together, so feel free to comment, tweet at me, or send me an email.
 [t]: http://www.twitter.com/Z1MM32M4N/
 [g]: http://www.github.com/Z1MM32M4N/
 [h]: http://www.zimmerman.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Summer Project Series]]></title>
    <link href="http://blog.zimmerman.io/2014/06/19/summer-project-series/"/>
    <updated>2014-06-19T19:16:18-05:00</updated>
    <id>http://blog.zimmerman.io/2014/06/19/summer-project-series</id>
    <content type="html"><![CDATA[<p>After spending most of the beginning of the summer flying, driving, moving, moving again, riding trains, riding different trains, and starting a new job, it&rsquo;s finally time to start working on some cool side projects.</p>

<!-- more -->


<h1>Projects</h1>

<p>This page will just serve as a list of links to various posts grouped by project. Hopefully you can find something that interests you!</p>

<h2>Running a VPS</h2>

<p>Inspired in part by the <a href="http://www.club.cc.cmu.edu/talks/vps.html">Computer Club talk</a> and in part by my inability to do anything quickly on a raspberry pi, I recently decided to rent out a VPS from DigitalOcean. Read on for notes and ramblings about what I&rsquo;m using it for.</p>

<ul>
<li><a href="/2014/06/19/running-a-vps-log-0/">Running a VPS: Log 0 - Initial Setup</a></li>
<li><a href="/2014/06/19/running-a-vps-log-1/">Running a VPS: Log 1 - Managing Dotfiles Across Machines</a></li>
<li><a href="/2014/06/24/running-a-vps-log-2/">Running a VPS: Log 2 - Seriously: Back It Up</a></li>
<li><a href="/2014/07/04/running-a-vps-log-3/">Running a VPS: Log 3 - A Mail Server that Works… Kind of.</a></li>
<li><a href="/2014/07/07/running-a-vps-log-4/">Running a VPS: Log 4 - Debugging a Broken Mail Server</a></li>
<li><a href="/2014/07/07/running-a-vps-log-5/">Running a VPS: Log 5 - It&rsquo;s not you, it&rsquo;s me</a></li>
</ul>


<h2>JavaScript Adventures</h2>

<p>Over at ScottyLabs, we&rsquo;re planning some super awesome talks and labs to teach web development during the upcoming semester, so I&rsquo;ve been hard at work compiling and writing some awesome JavaScript demos, resources, and projects.</p>

<ul>
<li><a href="/2014/06/16/why-everyone-loves-javascript/">Why Everyone Loves JavaScript</a></li>
</ul>


<p>Edit: Web Dev Weeks was a hit! If you had the chance to come to one of the talks, great! We&rsquo;ll be holding similar events later in the year, too. If you didn&rsquo;t make it, here&rsquo;s what you missed:</p>

<ul>
<li><a href="//scottylabs.org/webdevweeks/">Web Dev Weeks homepage</a></li>
<li><a href="//scottylabs.org/webdevweeks/frontend/">My Frontend Development (JavaScript) workshop</a></li>
</ul>


<hr />

<h2>Print@ScottyLabs</h2>

<p>Okay, so I haven&rsquo;t actually started this one yet, but I will be soon! I&rsquo;ll be rewriting the service from just about the ground up, adding tons of cool features along the way.</p>

<p>In the mean time, if mail servers, Python 3, and Django are your thing, you may want to check out the following links that I&rsquo;ve come across while doing a bit of research.</p>

<ul>
<li><strong> <a href="https://docs.python.org/3/whatsnew/3.4.html#whatsnew-email-contentmanager">Python 3.4.1 and MIME Multipart Messages</a> </strong></li>
<li><strong> <a href="https://docs.djangoproject.com/en/dev/releases/1.7/">Django 1.7 to include built-in schema migrations</a> </strong></li>
</ul>


<p>Edit: I&rsquo;ve started Print 2.0, and it&rsquo;s moving slowly now that classes have started to pick up. I have done a bit of work on it though, and I&rsquo;ll be documenting it soon. Since it&rsquo;s no longer the summer, though, it won&rsquo;t be published under the Summer Project Series tag.</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on [Twitter][t], checking out my tinkerings on [GitHub][g], or paying a visit to [my homepage][h]. I&#8217;d love to hear what you think about what I&#8217;ve managed to put together, so feel free to comment, tweet at me, or send me an email.
 [t]: http://www.twitter.com/Z1MM32M4N/
 [g]: http://www.github.com/Z1MM32M4N/
 [h]: http://www.zimmerman.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding a Network Printer to a Linux Server]]></title>
    <link href="http://blog.zimmerman.io/2014/05/06/adding-a-network-printer-to-a-linux-server/"/>
    <updated>2014-05-06T01:09:29-05:00</updated>
    <id>http://blog.zimmerman.io/2014/05/06/adding-a-network-printer-to-a-linux-server</id>
    <content type="html"><![CDATA[<p>It&rsquo;s one thing to plug in a CD, click through a few dialogs, and wait for the computer to chime at you saying that your printer has been installed. Unfortunately, this is not how server administration works. Here&rsquo;s my account of installing multiple network-attached printers on a Debian server.</p>

<!-- more -->


<p></p>

<h2>TL;DR</h2>

<p>For those who only care about the solution: <a href="#tldr">TL;DR</a>.</p>

<h2>The Hard Way</h2>

<p>As I mentioned in my last post, I&rsquo;m a part of a student organization called <a href="//www.scottylabs.org">ScottyLabs</a>. We do tons of cool things, but the project which I&rsquo;m currently working on is <a href="//print.scottylabs.org">Print@ScottyLabs</a>. It&rsquo;s a really handy service which lets you send an attachment to <a href="&#x6d;&#97;&#105;&#x6c;&#x74;&#x6f;&#58;&#112;&#114;&#105;&#x6e;&#116;&#x40;&#115;&#x63;&#x6f;&#116;&#116;&#x79;&#108;&#x61;&#98;&#115;&#46;&#x6f;&#114;&#103;">&#x70;&#114;&#105;&#110;&#x74;&#64;&#115;&#x63;&#111;&#x74;&#x74;&#121;&#x6c;&#x61;&#98;&#x73;&#x2e;&#111;&#114;&#103;</a> and have it sent to the printer. I&rsquo;m currently in the process of rewriting much of the code base from scratch to support a plethora of highly-requested features, so there will no doubt be more posts about my exploits.</p>

<p>Luckily, CMU (and arguably every college) is not terribly notable for keeping up-to-date information on it&rsquo;s website. This means that I got the &ldquo;wonderful&rdquo; opportunity to dig through CUPS documentation, sketchy printer manufacturer websites, and the depths of the Internet to finagle together a solution. Here&rsquo;s to hoping that you have a far more pleasurable experience. Without further ado, these are the steps I went through to get it done.</p>

<h2>What Didn&rsquo;t Work</h2>

<p>The Common Unix Printing System (CUPS) is a relatively new standard which is designed to improve over the rather haphazard methods used for printing in the past. It improves in a lot of ways and has a few neat features. One of these is a handy web interface which lets you interact with your configuration files, add printers, view the print queue, etc. through a beginner-friendly GUI, which described me perfectly when I started and still does now.</p>

<p>By default, when <code>cupsd</code> (the CUPS daemon) starts up, it listens on <code>http://localhost:631</code> incoming HTTP requests. By default, external requests are refused. You can either enable these in a configuration file somewhere or <a href="http://ubuntuguide.org/wiki/Using_SSH_to_Port_Forward">tunnel your traffic</a> through an <code>ssh</code> proxy, &ldquo;tricking&rdquo; the server into thinking your requests are coming locally. Additionally, you must be either <code>root</code> or in the <code>lpadmin</code> group to access the administration parts of this web GUI.</p>

<p>But for whatever reason, neither using the <code>root</code> username and password nor adding myself to the <code>lpadmin</code> group worked. I was incessantly blocked by the interface when I tried to give it my credentials. Defeated, I needed to find another way.</p>

<p>I’m telling you this as a sort of justification for the super hacky solution that I came up with (but that works in the end, even if it’s non-standard). If you have any ideas on why this failed, I&rsquo;d love to hear them!</p>

<h2>When in doubt, duct tape</h2>

<p>The instructions to install CMU print drivers on Linux only work for environments with desktop environments installed. (You can read these instructions <a href="http://www.cmu.edu/computing/clusters/printing/how-to/linux/pers-cluster.html">here</a>). So, in keeping with the UNIX philosophy that everything’s a file, the solution I came up with was essentially to follow these instructions on a <strong>personal Linux box</strong>, then <strong>copy and modify</strong> the corresponding files to achieve the same effect on the server we need them to be on.</p>

<p>It’s at this point that you’re probably wondering why I didn’t just do a little research and figure out how to make these modifications myself, or perhaps figure out where the files I needed were coming from. There are a couple of reasons. First, that takes a lot of time, I&rsquo;m lazy, and whatever I came up with didn&rsquo;t need to scale. Second, when you install a CUPS printer, you need a PostScript Printer Description (PPD) file to tell CUPS how the printer works. Despite my best efforts searching the web, I couldn’t find a central repository where these .ppd files were stored. However, most desktop environments have the ability to search <strong>somewhere mystical</strong> (read: you should tell me if you know) and download these .ppd files.</p>

<p><a name="tldr"></a></p>

<h2>Do you think I really care, just tell me how it works</h2>

<p>The process is not too complicated. Go back to the <a href="http://www.cmu.edu/computing/clusters/printing/how-to/linux/pers-cluster.html">CMU instructions</a> to install a printer on a personal Linux machine. Following them should be fairly self explanatory. Say perhaps that you want to install the print drivers for the queue <code>andrew-color</code>. After following along and inserting “andrew-color” as the print queue where required, you’ll come up to a screen that asks you to name your printer. This name does not have to be the name of the queue, but I always make it that when I&rsquo;m working with the CMU printers. Either way, be sure to remember what you entered for this name (again, I’m using the name “andrew-color”).</p>

<p>Also, part of the process should involve you specifying a PPD file. The easiest way to do this is to go to a printer that dispatches jobs from that queue and to get the make and model for it. In the case of andrew-color, the Wean printer is an HP Color LaserJet CP6015x. Using this information, we can use the Gnome/KDE/XFCE window, enter our make and model, and have it spit out the recommended PPD file to use (although it likely won&rsquo;t call as such).</p>

<p>Now that everything is all installed, we can pluck the information we need. If you’re on a standard Linux install, your CUPS files will be in <code>/etc/cups</code>. The specific files that are of interest to us are <code>/etc/cups/printers.conf</code> and <code>/etc/cups/ppd/&lt;your-printer-name&gt;.ppd</code>, so my file is called <code>/etc/cups/ppd/andrew-color.ppd</code>. We need the entire .ppd file, and it will go into the corresponding directory on our server. As for <code>printers.conf</code>, we just need a specific entry. This file is a list of all the installed printers, each wrapped in <code>&lt;Printer your-printer-name&gt;&lt;/Printer&gt;</code> tags. Yank this text however you want from your local computer to the server, and add it to the corresponding <code>printers.conf</code> file. If your personal Linux machine made the <code>&lt;Printer&gt;&lt;/Printer&gt;</code> tags into <code>&lt;DefaultPrinter x&gt;&lt;/DefaultPrinter&gt;</code> tags, go ahead and change this to just <code>&lt;Printer x&gt;&lt;/Printer&gt;</code>. To recap, now I’ve got about 20 lines of additional configuration data added to the <code>printers.conf</code> file on my server, beginning with the line <code>&lt;Printer andrew-color&gt;</code> and ends with the line <code>&lt;/Printer&gt;</code>.</p>

<p>For my installation, I have one more thing to do. Somewhere in the middle of this entry, there is a line which reads something like <code>Filter application/vnd.cups-postscript 0 hpps</code>. CUPS has a filtering functionality that lets you interact with the data before it gets printed, which you can read more about <a href="http://en.wikipedia.org/wiki/CUPS#Filtering_process">here</a>. We want to make sure that we use the <code>foomatic</code> filters (because that&rsquo;s how our server is configured), so we have to change the existing filters so that they read
~~~
Filter application/vnd.cups-raw 0 -
Filter application/vnd.cups-postscript 100 foomatic-rip
Filter application/vnd.cups-pdf 0 foomatic-rip
~~~
After all this, if you’ve copied the PPD file into the right folder (<code>/etc/cups/ppd/</code>), then you’re all set! Restart CUPS with <code>sudo /etc/init.d/cups restart</code> so that your changes take effect. You can print using <code>lp</code> and the <code>-d</code> flag to specify the print queue you want. Remember that we picked the name “andrew-color” for our print queue above, so a sample <code>lp</code> command would look like this:</p>

<p><code>lp -t ‘My First Color Print Job’ -U jezimmer -d andrew-color /path/to/myfile.pdf</code></p>

<p>Happy printing!</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on [Twitter][t], checking out my tinkerings on [GitHub][g], or paying a visit to [my homepage][h]. I&#8217;d love to hear what you think about what I&#8217;ve managed to put together, so feel free to comment, tweet at me, or send me an email.
 [t]: http://www.twitter.com/Z1MM32M4N/
 [g]: http://www.github.com/Z1MM32M4N/
 [h]: http://www.zimmerman.io/
</p>
]]></content>
  </entry>
  
</feed>
